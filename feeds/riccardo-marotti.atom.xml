<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Riccardo Marotti - Riccardo Marotti</title><link href="http://blog.riccardomarotti.com/" rel="alternate"></link><link href="http://blog.riccardomarotti.com/feeds/riccardo-marotti.atom.xml" rel="self"></link><id>http://blog.riccardomarotti.com/</id><updated>2012-06-14T22:43:00+02:00</updated><entry><title>Tip: cancellazione “bulk” dalla libreria di Kindle</title><link href="http://blog.riccardomarotti.com/post/25110964828/tip-cancellazione-bulk-dalla-libreria-di-kindle" rel="alternate"></link><published>2012-06-14T22:43:00+02:00</published><updated>2012-06-14T22:43:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2012-06-14:/post/25110964828/tip-cancellazione-bulk-dalla-libreria-di-kindle</id><summary type="html">&lt;p&gt;L'interfaccia della &lt;a href="http://www.amazon.it/gp/digital/fiona/manage"&gt;libreria di Kindle&lt;/a&gt; permette di cancellare soltanto un documento per volta.
Questo rende, di fatto, impossibile la cancellazione di più di 50 elementi.&lt;/p&gt;
&lt;p&gt;Per ovviare a questa limitazione è possibile utilizzare questo &lt;em&gt;hack&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Anzitutto, filtrare i documenti in modo che siano visualizzati soltanto quelli che si vogliono cancellare …&lt;/p&gt;</summary><content type="html">&lt;p&gt;L'interfaccia della &lt;a href="http://www.amazon.it/gp/digital/fiona/manage"&gt;libreria di Kindle&lt;/a&gt; permette di cancellare soltanto un documento per volta.
Questo rende, di fatto, impossibile la cancellazione di più di 50 elementi.&lt;/p&gt;
&lt;p&gt;Per ovviare a questa limitazione è possibile utilizzare questo &lt;em&gt;hack&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Anzitutto, filtrare i documenti in modo che siano visualizzati soltanto quelli che si vogliono cancellare (nel mio caso erano tutti gli articoli inviati da &lt;a href="http://www.instapaper.com/"&gt;Instapaper&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="KindleList" src="/images/kindle.png"&gt;&lt;/p&gt;
&lt;p&gt;Poi aprire la console di Javascript ed eseguire questo codice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[name=&amp;quot;contentName&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;Fion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deleteItem_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;
Verranno cancellati &lt;strong&gt;tutti gli elementi correntemente visualizzati&lt;/strong&gt;.
&lt;hr/&gt;&lt;/p&gt;</content><category term="Kindle"></category></entry><entry><title>Zebre</title><link href="http://blog.riccardomarotti.com/post/11946895368/zebre" rel="alternate"></link><published>2011-10-26T14:00:00+02:00</published><updated>2011-10-26T14:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-10-26:/post/11946895368/zebre</id><summary type="html">&lt;p&gt;&lt;img alt="Zebre" src="/images/zebre.jpg"&gt;
Esperimento: &lt;em&gt;acquarello&lt;/em&gt;, &lt;em&gt;china&lt;/em&gt;, &lt;em&gt;guazzo&lt;/em&gt; e &lt;em&gt;sale&lt;/em&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Zebre" src="/images/zebre.jpg"&gt;
Esperimento: &lt;em&gt;acquarello&lt;/em&gt;, &lt;em&gt;china&lt;/em&gt;, &lt;em&gt;guazzo&lt;/em&gt; e &lt;em&gt;sale&lt;/em&gt;.&lt;/p&gt;</content></entry><entry><title>Aprire la console nella directory corrente del Finder (Lion)</title><link href="http://blog.riccardomarotti.com/post/11940733826/tip-aprire-la-console-nella-directory-corrente-del" rel="alternate"></link><published>2011-10-26T07:30:00+02:00</published><updated>2011-10-26T07:30:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-10-26:/post/11940733826/tip-aprire-la-console-nella-directory-corrente-del</id><summary type="html">&lt;p&gt;Mi capita spesso, mentre uso il Finder, di dover aprire un terminale dal punto in cui sono. A questo scopo, avevo sempre utilizzato uno script di automator, ma ho scoperto che, in Lion, esiste il servizio “New Terminal at Folder” (non so come sia in italiano).&lt;/p&gt;
&lt;p&gt;Per abilitarlo, basta aprire …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mi capita spesso, mentre uso il Finder, di dover aprire un terminale dal punto in cui sono. A questo scopo, avevo sempre utilizzato uno script di automator, ma ho scoperto che, in Lion, esiste il servizio “New Terminal at Folder” (non so come sia in italiano).&lt;/p&gt;
&lt;p&gt;Per abilitarlo, basta aprire &lt;code&gt;System Preferences &amp;gt; Keyboard &amp;gt; Keyboard Shortcuts &amp;gt; Services&lt;/code&gt;, fare doppio click a fianco di “New Terminal at Folder” per inserire lo shortcut con cui si desidera aprire il terminale, e selezionare la checkbox corrispondente:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/images/new_terminal_at_folder.png"&gt;&lt;/p&gt;
&lt;p&gt;In questo modo, si potrà accedere alla funzionalità tramite &lt;code&gt;click destro &amp;gt; Services &amp;gt; New Terminal at Folder&lt;/code&gt;, oppure tramite lo shortcut inserito.&lt;/p&gt;</content><category term="Lion"></category></entry><entry><title>Tip - password manager minimale</title><link href="http://blog.riccardomarotti.com/post/11898574381/tip-password-manager-minimale" rel="alternate"></link><published>2011-10-25T00:00:00+02:00</published><updated>2011-10-25T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-10-25:/post/11898574381/tip-password-manager-minimale</id><summary type="html">&lt;p&gt;Dopo aver letto &lt;a href="http://www.theatlantic.com/magazine/archive/2011/10/hacked/8673/"&gt;questo&lt;/a&gt; articolo, il mio desiderio di avere password complesse è aumentato. Tale desiderio, però, non va d’accordo con la mia incapacità mnemonica.&lt;/p&gt;
&lt;p&gt;Allora ho pensato a un &lt;a href="http://en.wikipedia.org/wiki/Password_manager"&gt;password manager&lt;/a&gt;, ma sono tutti troppo complessi (e in certi casi costosi). A me serve solo un software che …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dopo aver letto &lt;a href="http://www.theatlantic.com/magazine/archive/2011/10/hacked/8673/"&gt;questo&lt;/a&gt; articolo, il mio desiderio di avere password complesse è aumentato. Tale desiderio, però, non va d’accordo con la mia incapacità mnemonica.&lt;/p&gt;
&lt;p&gt;Allora ho pensato a un &lt;a href="http://en.wikipedia.org/wiki/Password_manager"&gt;password manager&lt;/a&gt;, ma sono tutti troppo complessi (e in certi casi costosi). A me serve solo un software che:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mi generi delle password&lt;/li&gt;
&lt;li&gt;me le salvi in modo sicuro, proteggendole con una password (l’unica che dovrò ricordare)&lt;/li&gt;
&lt;li&gt;mi permetta di copiare negli appunti una password salvata&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Spendere 50 euro per questo mi sembrava eccessivo (&lt;a href="http://keepass.info/"&gt;keepass&lt;/a&gt; è gratuito, ma su Mac serve Mono…).&lt;/p&gt;
&lt;p&gt;Per cui, dopo qualche ricerca, il nerd che è in me ha prodotto questo script, che va aggiunto al proprio &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PWD_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Dropbox/passwords
&lt;span class="nv"&gt;DEFAULT_PWD_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password

&lt;span class="k"&gt;function&lt;/span&gt; genpwd&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    head /dev/urandom &lt;span class="p"&gt;|&lt;/span&gt; uuencode -m - &lt;span class="p"&gt;|&lt;/span&gt; sed -n 2p &lt;span class="p"&gt;|&lt;/span&gt; head -c &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;15&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; gpg -c --force-mdc &amp;gt; &lt;span class="nv"&gt;$PWD_DIR&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;$DEFAULT_PWD_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.gpg&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; getpwd&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    gpg -d &lt;span class="nv"&gt;$PWD_DIR&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEFAULT_PWD_FILE&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;.gpg &lt;span class="p"&gt;|&lt;/span&gt; pbcopy
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In sostanza vengono creati due comandi: &lt;code&gt;genpwd&lt;/code&gt;, che genera una password, la critta con &lt;a href="http://www.gnupg.org/"&gt;gpg&lt;/a&gt;, e la salva. E &lt;code&gt;getpwd&lt;/code&gt;, che permette di copiarla negli appunti.&lt;/p&gt;
&lt;p&gt;Per esempio&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; genpwd google &lt;span class="m"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;crea una password di 20 caratteri e la salva, crittata, nel file &lt;code&gt;google.gpg&lt;/code&gt;, contenuto nella directory &lt;code&gt;~/Dropbox/passwords&lt;/code&gt; (per cambiare la directory, basta modificare la variabile PWD_DIR).&lt;/p&gt;
&lt;p&gt;Se non si passano parametri, viene generata una password di 15 caratteri (lunghezza di default) e viene salvata nel file &lt;code&gt;password.gpg&lt;/code&gt; (che è il nome di default).&lt;/p&gt;
&lt;p&gt;Per ottenere la password salvata&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; getpwd google
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;decritta il file &lt;code&gt;google.gpg&lt;/code&gt; e copia il suo contenuto (cioè la password) negli appunti.&lt;/p&gt;
&lt;p&gt;Volendo si può svuotare la clipboard con&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; pbcopy &amp;lt; /dev/null
&lt;/pre&gt;&lt;/div&gt;</content><category term="Robe da nerd"></category></entry><entry><title>Accedere alle risorse del bundle nei test</title><link href="http://blog.riccardomarotti.com/post/11855069147/tip-accedere-alle-risorse-del-bundle-nei-test" rel="alternate"></link><published>2011-10-24T00:00:00+02:00</published><updated>2011-10-24T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-10-24:/post/11855069147/tip-accedere-alle-risorse-del-bundle-nei-test</id><summary type="html">&lt;p&gt;Per accedere ai file contenuti nel bundle di un’applicazione iOS, in genere si usa una cosa del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="bp"&gt;NSBundle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSBundle&lt;/span&gt; &lt;span class="n"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Purtroppo, nei test, se si prova a usare il mainBundle per ottenere il path di una risorsa,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nl"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;aResource&amp;quot;&lt;/span&gt;  &lt;span class="nl"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;aType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;si ottiene un bel &lt;code&gt;NULL …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Per accedere ai file contenuti nel bundle di un’applicazione iOS, in genere si usa una cosa del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="bp"&gt;NSBundle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSBundle&lt;/span&gt; &lt;span class="n"&gt;mainBundle&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Purtroppo, nei test, se si prova a usare il mainBundle per ottenere il path di una risorsa,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nl"&gt;pathForResource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;aResource&amp;quot;&lt;/span&gt;  &lt;span class="nl"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;aType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;si ottiene un bel &lt;code&gt;NULL&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Penso che questo succeda perché il mainBundle è il bundle associato alla directory dell’applicazione correntemente in esecuzione, che non è la nostra applicazione, ma il tester.&lt;/p&gt;
&lt;p&gt;Per ovviare a questo problema, si può usare&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="bp"&gt;NSBundle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSBundle&lt;/span&gt;  &lt;span class="nl"&gt;bundleForClass&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;MyTestedClass&lt;/span&gt;  &lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;che restituisce il bundle associato alla directory che contiene la classe passata.&lt;/p&gt;
&lt;p&gt;Passando la classe testata, si otterrà il bundle associato alla directory che contiene tutte le risorse usate nel test.&lt;/p&gt;</content><category term="Objective C"></category></entry><entry><title>Abusi di potere</title><link href="http://blog.riccardomarotti.com/post/6446922840/abusi-di-potere" rel="alternate"></link><published>2011-06-12T00:00:00+02:00</published><updated>2011-06-12T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-06-12:/post/6446922840/abusi-di-potere</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Pubblico questo racconto, perché lo trovo simpatico e, visto che è da parecchio tempo che non scrivo un post, riesumo un mio vecchio scritto, giusto per fare presenza.&lt;/p&gt;
&lt;p&gt;A parte il mio, i nomi sono inventati.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lorenzo Di Maggio era un carabiniere. Era appostato insieme al suo collega, Michele Sordo …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Pubblico questo racconto, perché lo trovo simpatico e, visto che è da parecchio tempo che non scrivo un post, riesumo un mio vecchio scritto, giusto per fare presenza.&lt;/p&gt;
&lt;p&gt;A parte il mio, i nomi sono inventati.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lorenzo Di Maggio era un carabiniere. Era appostato insieme al suo collega, Michele Sordo, in uno spiazzo della strada Bazzanese, nei pressi di Casale California (Bazzano), per fare qualche multa.&lt;/p&gt;
&lt;p&gt;Erano quasi le cinque, ed era ormai finito il turno, quando una Seat Ibiza bordeaux metallizzato sorpassò un furgoncino proprio nell’incrocio che precedeva lo spiazzo dove avevano parcheggiato la loro Punto.&lt;/p&gt;
&lt;p&gt;Lorenzo fermò immediatamente l’auto. Il guidatore abbassò il finestrino:&lt;/p&gt;
&lt;p&gt;&amp;mdash; Lei è in contravvenzione &amp;mdash; disse Lorenzo.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Senta, adesso lei se ne torna sulla sua macchina e mi lascia stare… &amp;mdash; disse il guidatore.&lt;/p&gt;
&lt;p&gt;Rivolgendosi a Michele, Lorenzo disse sorridendo: &amp;mdash; Ehi, qua c’è uno che vuole farsi arrestare! &amp;mdash; poi, rivolgendosi al guidatore: &amp;mdash; Patente e libretto, per favore.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Senta: non mi rompa le scatole più del necessario. Se non la smette di scocciarmi sarà peggio per lei: non vorrei che si ritrovasse sotto un portico a elemosinare qualche pezzo di pane secco… &amp;mdash; mentre diceva questo, però, stava porgendo la patente al carabiniere.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Lei mi sta minacciando o sbaglio, signor &amp;mdash; lesse la patente &amp;mdash; Marotti?&lt;/p&gt;
&lt;p&gt;&amp;mdash; Si. E, a proposito: mi dica il suo nome.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Non la riguarda&lt;/p&gt;
&lt;p&gt;&amp;mdash; Tanto lo so già. Lei si chiama Lorenzo di Maggio.&lt;/p&gt;
&lt;p&gt;&amp;mdash; E lei come può saperlo?&lt;/p&gt;
&lt;p&gt;&amp;mdash; Questo non la riguarda. Allora si toglie dai colgioni o devo incazzarmi?&lt;/p&gt;
&lt;p&gt;Il carabiniere divenne paonazzo per la rabbia, ma riuscì a mantenere la calma. Disse: &amp;mdash; Ok. Ora sta esagerando. Scenda dall’auto. È in arresto.&lt;/p&gt;
&lt;p&gt;Alle cinque e un quarto Lorenzo arrivò al comando dei carabinieri con il signor Marotti, che lo precedeva ammanettato.&lt;/p&gt;
&lt;p&gt;Non appena furono entrati, le voci di tutti i presenti si zittirono e guardarono i suddetti con aria incredula.&lt;/p&gt;
&lt;p&gt;Un altoparlante strillò: &amp;mdash; Di Maggio! Vieni subito da me!&lt;/p&gt;
&lt;p&gt;Lorenzo fu molto sorpreso di questo: il maresciallo era arrabbiato con lui. Cosa aveva mai potuto fare per meritarselo? Disse a Marotti, sbattendolo su di una panchina: &amp;mdash; Lei stia qui e cerchi di non creare ulteriori problemi. &amp;mdash; Poi salì la rampa di scale lì di fronte, per arrivare a una stanza, nella quale entrò, dopo aver aperto la porta.&lt;/p&gt;
&lt;p&gt;Fu immediatamente devastato dalle parole del maresciallo: &amp;mdash; Ma ti sei completamente rimbecillito? Sei solo una piccola testa di cazzo! Ti rendi conto di cos’hai fatto?&lt;/p&gt;
&lt;p&gt;Lorenzo non sapeva cosa dire.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Idiota! Hai arrestato il narratore! Ma ti rendo conto che è lui che ti permette di vivere? Che ti permette di pensare? Ti rendi conto che se avesse voluto avrebbe potuto cancellarti e per lui non ci sarebbero stati altri problemi? E credi che io possa aiutarti anche ‘sta volta? NO! ‘Sta volta non posso fare niente per aiutarti! Ti sei messo nella merda e ormai ci resterai per sempre!…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Stavo passeggiando sotto i portici di Modena, in Via Emilia. Pioveva a dirotto. Vidi un uomo seduto in terra, vestito di soli stracci. Chiedeva qualche spicciolo. In tasca avevo un pezzo di pane secco. Mi avvicinai al signore: &amp;mdash; Lei si chiama Lorenzo, vero?&lt;/p&gt;
&lt;p&gt;&amp;mdash; Sì &amp;mdash; rispose con voce tramante &amp;mdash; Mi… Lorenzo Di Maggio.&lt;/p&gt;
&lt;p&gt;Gli porsi il pezzo di pane e qualche spicciolo, pensando che così la mia coscienza mi avrebbe dato un attimo di tregua.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Grazie… Grazie mille signor…? &amp;mdash; chiese il mendicante.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Signor Marotti. Riccardo Marotti.&lt;/p&gt;
&lt;p&gt;Me ne andai.&lt;/p&gt;</content></entry><entry><title>Code Sign error: Provisioning profile ‘XXX’ can’t be found</title><link href="http://blog.riccardomarotti.com/post/5393177862/code-sign-error-provisioning-profile-xxx-cant-be" rel="alternate"></link><published>2011-05-11T00:00:00+02:00</published><updated>2011-05-11T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-05-11:/post/5393177862/code-sign-error-provisioning-profile-xxx-cant-be</id><summary type="html">&lt;p&gt;Se si aggiorna un Provisioning Profile, per esempio, di una distribuzione ad hoc di un’applicazione iOS, può succedere che, tentando di compilare, si incappi in questo errore:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Code Sign error: Provisioning profile 'XXX' can’t be found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Questo succede perché, se il nome del profilo resta lo stesso, XCode …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se si aggiorna un Provisioning Profile, per esempio, di una distribuzione ad hoc di un’applicazione iOS, può succedere che, tentando di compilare, si incappi in questo errore:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Code Sign error: Provisioning profile 'XXX' can’t be found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Questo succede perché, se il nome del profilo resta lo stesso, XCode non aggiornerà con il nuovo ID il riferimento al profilo di provisioning all’interno del progetto, ma manterrà quello vecchio, che non esiste più.&lt;/p&gt;
&lt;p&gt;L’unico modo che ho trovato per risolvere questo problema è stato di editare “a mano” il file project.pbxproj che sta all’interno del bundle del progetto (file &lt;code&gt;.xcodeproj&lt;/code&gt;). A questo punto, si devono sostituire tutte le occorrenze dell’ID presente nell’errore (quello che ho qui indicato con &lt;code&gt;XXX&lt;/code&gt;) con l’ID che del nuovo profilo. Nel mio caso c’erano due righe simili a queste:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PROVISIONING_PROFILE = “5EB9AFBEB-8D98-46F1-788C-482712DA5BA4”;&lt;/code&gt;
&lt;code&gt;“PROVISIONING_PROFILE[sdk=iphoneos*]” = “5E9AFBEB-8D98-46F1-788C-482712DA5BA4”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Per trovare il nuovo ID basta aprire l’Organizer, selezionare &lt;code&gt;Library/Provisioning Profiles&lt;/code&gt; e selezionare il profilo. Nel riepilogo sarà presente il profile identifier.&lt;/p&gt;</content><category term="XCode"></category></entry><entry><title>Tailcall optimization in Ruby</title><link href="http://blog.riccardomarotti.com/post/4923406088/tailcall-optimization-in-ruby" rel="alternate"></link><published>2011-04-25T00:00:00+02:00</published><updated>2011-04-25T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-04-25:/post/4923406088/tailcall-optimization-in-ruby</id><summary type="html">&lt;p&gt;Il &lt;a href="/post/4871880142/implementare-i-while-senza-usare-keywords#comment-190803796"&gt;commento&lt;/a&gt; di Alessandro al mio &lt;a href="/post/4871880142/implementare-i-while-senza-usare-keywords"&gt;post precedente&lt;/a&gt; ha evidenziato che, con l’approccio descritto, non si potrebbe fare una cosa del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;while_true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Stack overflow?&amp;quot;&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;perché lo stack si riempirebbe dopo poco.&lt;/p&gt;
&lt;p&gt;La soluzione a questo problema è l’implementazione della &lt;a href="http://en.wikipedia.org/wiki/Tail_call_optimization"&gt;Tailcall Optimization&lt;/a&gt; (TCO …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Il &lt;a href="/post/4871880142/implementare-i-while-senza-usare-keywords#comment-190803796"&gt;commento&lt;/a&gt; di Alessandro al mio &lt;a href="/post/4871880142/implementare-i-while-senza-usare-keywords"&gt;post precedente&lt;/a&gt; ha evidenziato che, con l’approccio descritto, non si potrebbe fare una cosa del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;while_true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Stack overflow?&amp;quot;&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;perché lo stack si riempirebbe dopo poco.&lt;/p&gt;
&lt;p&gt;La soluzione a questo problema è l’implementazione della &lt;a href="http://en.wikipedia.org/wiki/Tail_call_optimization"&gt;Tailcall Optimization&lt;/a&gt; (TCO). In parole povere si tratta, quando possibile, di rendere iterative le chiamate ricorsive.
In teoria, dalla versione 1.9 di Ruby, è possibile abilitare la TCO, ma, o ho sbagliato qualcosa, oppure non funziona come dovrebbe, perché, anche abilitandola, lo stack va in overflow con la ricorsione.&lt;/p&gt;
&lt;p&gt;Alla fine ho trovato &lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/145593"&gt;questa discussione&lt;/a&gt;, da cui ho ricavato questo pezzo di codice, dove si sfrutta il meccanismo di &lt;em&gt;catch/throw&lt;/em&gt; &lt;sup id="fnref-nota"&gt;&lt;a class="footnote-ref" href="#fn-nota"&gt;1&lt;/a&gt;&lt;/sup&gt; e un po’ di metaprogrammazione:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tailcall_optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;instance_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
         &lt;span class="kp"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:recurse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;else&lt;/span&gt;
         &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
           &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
             &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:recurse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
               &lt;span class="kp"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="k"&gt;end&lt;/span&gt;
           &lt;span class="k"&gt;end&lt;/span&gt;
         &lt;span class="k"&gt;end&lt;/span&gt;
         &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt;
       &lt;span class="k"&gt;end&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il metodo &lt;code&gt;tailcall_optimize&lt;/code&gt; altera il metodo passato, eliminando la ricorsione. Quindi, se si aggiunge:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Proc&lt;/span&gt;
     &lt;span class="n"&gt;tailcall_optimize&lt;/span&gt; &lt;span class="ss"&gt;:while_true&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;la ricorsione può continuare all’infinito.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-nota"&gt;
&lt;p&gt;l’interprete Ruby, ad ogni chiamata a &lt;code&gt;throw&lt;/code&gt;, cerca nello stack il blocco corrispondente (cioè che ha la stessa label del throw), svuota lo stack fino a quel punto e continua l’esecuzione da lì.&amp;#160;&lt;a class="footnote-backref" href="#fnref-nota" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Ruby"></category></entry><entry><title>Implementare i while senza usare keywords</title><link href="http://blog.riccardomarotti.com/post/4871880142/implementare-i-while-senza-usare-keywords" rel="alternate"></link><published>2011-04-23T00:00:00+02:00</published><updated>2011-04-23T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-04-23:/post/4871880142/implementare-i-while-senza-usare-keywords</id><summary type="html">&lt;p&gt;Da una discussione con &lt;a href="http://blogs.ugidotnet.org/AntonioGanci/Default.aspx"&gt;Antonio&lt;/a&gt; su come implementare il concetto di ciclo while nel tool di programmazione a oggetti su cui stiamo lavorando, è risultato che non serve creare costrutti sintattici particolari, ma basta un utilizzo oculato dei blocchi.&lt;/p&gt;
&lt;p&gt;Come sempre, l’ispirazione arriva da Smalltalk.&lt;/p&gt;
&lt;p&gt;Un esempio tipico di …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Da una discussione con &lt;a href="http://blogs.ugidotnet.org/AntonioGanci/Default.aspx"&gt;Antonio&lt;/a&gt; su come implementare il concetto di ciclo while nel tool di programmazione a oggetti su cui stiamo lavorando, è risultato che non serve creare costrutti sintattici particolari, ma basta un utilizzo oculato dei blocchi.&lt;/p&gt;
&lt;p&gt;Come sempre, l’ispirazione arriva da Smalltalk.&lt;/p&gt;
&lt;p&gt;Un esempio tipico di ciclo while è rappresentato dal fattoriale. Vediamone il calcolo per il numero 5, in Ruby:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
 &lt;span class="n"&gt;fattoriale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

 &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="n"&gt;fattoriale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fattoriale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
     &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;fattoriale&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il &lt;code&gt;while&lt;/code&gt; valuta l’espressione passata (count &amp;gt; 0) ed esegue il blocco passato fintanto che tale espressione è vera.&lt;/p&gt;
&lt;p&gt;&lt;a href="/post/3181905943/implementare-gli-if-senza-usare-keywords"&gt;Come per gli if&lt;/a&gt;, però, sarebbe stato possibile evitare di usare costrutti procedurali: è sufficiente aggiungere un messaggio &lt;code&gt;while_true&lt;/code&gt; alla classe che rappresenta il blocco (cioè &lt;code&gt;Proc&lt;/code&gt;), e usarlo in modo del tutto analogo al while:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;while_true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
     &lt;span class="n"&gt;fattoriale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fattoriale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
     &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il blocco anonimo &lt;code&gt;{ count &amp;gt; 0 }&lt;/code&gt; è un oggetto che risponde al messaggio &lt;code&gt;while_true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;L’implementazione di &lt;code&gt;while_true&lt;/code&gt; deve essere tale per cui, fintanto che l’esecuzione del blocco restituisce &lt;code&gt;true&lt;/code&gt;, viene eseguito il blocco passato come parametro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Proc&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;while_true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
         &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;if_true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
             &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
             &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;while_true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
         &lt;span class="k"&gt;end&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;while_true&lt;/code&gt; viene invocato ricorsivamente finché l’espressione del blocco che riceve il messaggio non è falsa.&lt;/p&gt;
&lt;p&gt;(Per l’implementazione di &lt;code&gt;if_true&lt;/code&gt;, si veda il &lt;a href="/post/3181905943/implementare-gli-if-senza-usare-keywords"&gt;post sugli if&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Può dare l’impressione di essere una banale modifica sintattica, ma si tratta di una differenza più sostanziale di quanto sembri.&lt;/p&gt;
&lt;p&gt;Gestire i &lt;code&gt;while&lt;/code&gt; in questo modo permette di rimuovere una parola chiave, semplificare il linguaggio, e renderlo più object oriented, dato che anche il ciclo while si riduce a uno scambio di messaggi.&lt;/p&gt;</content><category term="OOP"></category><category term="Spunti di riflessione"></category><category term="Ruby"></category></entry><entry><title>Storia del calendario, storia di un software</title><link href="http://blog.riccardomarotti.com/post/3445357594/storia-del-calendario-storia-di-un-software" rel="alternate"></link><published>2011-02-22T00:00:00+01:00</published><updated>2011-02-22T00:00:00+01:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-02-22:/post/3445357594/storia-del-calendario-storia-di-un-software</id><summary type="html">&lt;p&gt;Sono sempre stato piuttosto affascinato dall’evoluzione che ha avuto il calendario.&lt;/p&gt;
&lt;p&gt;Credo che questo sia dovuto al fatto che il calendario, in sostanza, è un software, essendo l’applicazione di un algoritmo. Il bello è che la sua evoluzione sembra quella di un software.&lt;/p&gt;
&lt;p&gt;Il problema del calendario è …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sono sempre stato piuttosto affascinato dall’evoluzione che ha avuto il calendario.&lt;/p&gt;
&lt;p&gt;Credo che questo sia dovuto al fatto che il calendario, in sostanza, è un software, essendo l’applicazione di un algoritmo. Il bello è che la sua evoluzione sembra quella di un software.&lt;/p&gt;
&lt;p&gt;Il problema del calendario è che il periodo di rivoluzione della terra intorno al sole (l’anno) e quello di rotazione su se stessa (il giorno), non sono sincronizzati. Per cui un anno non è divisibile in un numero intero di giorni. In particolare un anno è composto da 365 giorni, 6 ore, 9 minuti e 10 secondi (365,2422).&lt;/p&gt;
&lt;p&gt;Una delle prime versioni di calendario fu quello di Romolo. Pare che questo calendario avesse dieci mesi, sei da 30 e quattro da 31 giorni, da marzo a dicembre, per un totale di 304 giorni. Alla fine di dicembre si smetteva semplicemente di contare i giorni, fino alla primavera. Questo sistema, che, in pratica, non considera l’inverno, non aveva il problema della non sincronizzazione di durata anno/giorno.&lt;/p&gt;
&lt;p&gt;È un po’ come una prima release: fa quello che deve, sebbene un po’ rozza, ma alla fine in inverno i campi restano fermi; va bene così.&lt;/p&gt;
&lt;p&gt;Poi si cominciò a pensare che il popolo romano non potesse ritenere accettabile un sistema così impreciso. È come quando arriva il nuovo manager con discorsi del tipo “il processo deve essere mappato in modo più rigoroso!”, con l’unico scopo di illudersi di avere più &lt;a href="/post/556460537/sulle-stime"&gt;controllo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Allora Numa modificò le durate dei mesi (i mesi con giorni pari portavano sfortuna) e aggiunse Gennaio e Febbraio. In questo modo si arrivò ad avere 355 giorni. Per recuperare i dieci giorni che mancavano, venne introdotto un complicatissimo sistema di recupero, che, in sintesi, consisteva nell’inserire un mese straordinario, il Mercedonio, ogni due anni, che durava 22 o 23 giorni. Il ciclo era di quattro anni: anno normale, anno con mercedonio di 22 giorni, anno normale, anno con mercedonio di 23 giorni, anno normale, anno con mercedonio di 22 giorni.&lt;/p&gt;
&lt;p&gt;L’anno medio, con questo sistema, era di 366 giorni e 6 ore. C’era quindi ancora uno sfasamento di un giorno tra l’anno solare e l’anno civile. Uno sfasamento eccessivo, che portò a innumerevoli modifiche (bug fix) che complicarono sempre di più la regola, fino a portarla ad avere un ciclo di 24 anni.&lt;/p&gt;
&lt;p&gt;Anche nel software, si tende ad aggiungere logiche per adattare alle nuove richieste, piuttosto che trovare la soluzione più semplice che soddisfi sia le vecchie, sia le nuove features.&lt;/p&gt;
&lt;p&gt;In sostanza fu impossibile applicare queste regole e, intorno alla metà del primo secolo avanti Cristo, lo sfasamento tra anno solare e anno civile era di circa tre mesi.&lt;/p&gt;
&lt;p&gt;Giulio Cesare, quindi, affidò all’astronomo Sosìgene, l’arduo compito di sistemare le cose.&lt;/p&gt;
&lt;p&gt;Insomma: abbiamo un software che funziona da ormai svariati anni a forza di bug-fix e martellate, ora non funziona più e non riusciamo più a gestirlo: chiamiamo uno bravo che ci sistema la baracca.&lt;/p&gt;
&lt;p&gt;L’esperto considerò che l’anno durasse 365,25 giorni. Di conseguenza il nuovo anno sarebbe stato di 365 giorni, e di 366 ogni quattro anni, così che la durata media fosse di 365,25 giorni. Per ottenere questo ci sarebbero stati dodici mesi di 30 e 31 giorni alternati, con l’eccezione di febbraio che sarebbe stato di 29 giorni, e 30 ogni quattro anni. Questo calendario, il calendario Giuliano, entrò in vigore nel 45 a.c. Però, per azzerare gli errori accumulatisi negli anni precedenti si decise di rinunciare alla retrocompatibilità: il 46 a.c. fu un anno particolare; vi furono aggiunti tre mesi di 23, 33 e 34 giorni; così l’ultimo anno di Numa ebbe 445 giorni.&lt;/p&gt;
&lt;p&gt;Questo calendario è decisamente migliore dei predecessori, perde 3 giorni ogni 400 anni, e ha regole semplici.&lt;/p&gt;
&lt;p&gt;Perfettamente consci del problema dei 3 giorni persi ogni quattrocento anni, si andò avanti, ignorando la cosa; questo è un classico dell’informatica: sappiamo benissimo che c’è un problema. Adesso sarebbe facilissimo sistemarlo, ma adesso tutto funziona in modo accettabile: ci preoccuperemo quando sarà ora (e sarà difficilissimo sistemarlo).&lt;/p&gt;
&lt;p&gt;Così, nel sedicesimo secolo lo sfasamento tra anno solare e civile arrivò a circa dieci giorni. Allora nel 1582 ci fu la riforma Gregoriana, cioè l’attuale calendario. La cosa interessante fu che, per recuperare i giorni persi, si rinunciò nuovamente alla retrocompatibilità e si fece in modo che il giorno successivo al 4 ottobre 1582 fosse il 15 ottobre.&lt;/p&gt;
&lt;p&gt;In Svezia però, si tentò di mantenere la retrocompatibilità. La decisione di passare dal Giuliano al Gregoriano fu presa nel 1699, ma si decise di recuperare i dieci giorni eliminando gli anni bisestili dal 1700 al 1740; cioè si sarebbe recuperato un giorno ogni 4 anni, cioè dieci nei quarant’anni. Solo che questo piano fu applicato solo nel 1700: nel 1704 e nel 1708 si dimenticarono di farlo. Una volta capito l’errore, si tornò al calendario Giuliano.&lt;/p&gt;
&lt;p&gt;Alla fine la Svezia passò al Gregoriano nel 1753, rinunciando alla retrocompatibilità, cioè saltando i giorni dal 18 al 28 febbraio.&lt;/p&gt;
&lt;p&gt;Quanti software hanno avuto storie simili?&lt;/p&gt;</content><category term="Spunti di riflessione"></category><category term="Preferiti"></category></entry><entry><title>Implementare gli if senza usare keywords</title><link href="http://blog.riccardomarotti.com/post/3181905943/implementare-gli-if-senza-usare-keywords" rel="alternate"></link><published>2011-02-08T00:00:00+01:00</published><updated>2011-02-08T00:00:00+01:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-02-08:/post/3181905943/implementare-gli-if-senza-usare-keywords</id><summary type="html">&lt;p&gt;Lavorando a un tool di sviluppo a oggetti, mi sono trovato a ragionare su quanto sia sbagliato usare la parola chiave &lt;code&gt;if&lt;/code&gt; in un linguaggio a oggetti.&lt;/p&gt;
&lt;p&gt;Le strutture di controllo come gli &lt;code&gt;if&lt;/code&gt; sono fortemente procedurali e spingono a non programmare a oggetti.&lt;/p&gt;
&lt;p&gt;Il succo della programmazione a oggetti …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lavorando a un tool di sviluppo a oggetti, mi sono trovato a ragionare su quanto sia sbagliato usare la parola chiave &lt;code&gt;if&lt;/code&gt; in un linguaggio a oggetti.&lt;/p&gt;
&lt;p&gt;Le strutture di controllo come gli &lt;code&gt;if&lt;/code&gt; sono fortemente procedurali e spingono a non programmare a oggetti.&lt;/p&gt;
&lt;p&gt;Il succo della programmazione a oggetti è l’invio di messaggi; non è un caso se &lt;a href="http://en.wikipedia.org/wiki/Smalltalk"&gt;Smalltalk&lt;/a&gt; (l’unico linguaggio veramente a oggetti che conosco) implementa gli &lt;code&gt;if&lt;/code&gt; come dei messaggi.&lt;/p&gt;
&lt;p&gt;In Ruby i booleani sono le due classi &lt;code&gt;TrueClass&lt;/code&gt; e &lt;code&gt;FalseClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Per ottenere un comportamento simile a quello di Smalltalk, si possono aggiungere i metodi &lt;code&gt;if_true&lt;/code&gt; e &lt;code&gt;if_false&lt;/code&gt; a queste classi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TrueClass&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_true&lt;/span&gt;
         &lt;span class="k"&gt;yield&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_false&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FalseClass&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_true&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_false&lt;/span&gt;
         &lt;span class="k"&gt;yield&lt;/span&gt;
     &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;

 &lt;span class="n"&gt;aBoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="n"&gt;aBoolean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;if_true&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="c1"&gt;# invece di&lt;/span&gt;
 &lt;span class="c1"&gt;# print “true!” if aBoolean&lt;/span&gt;

 &lt;span class="n"&gt;aBoolean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;if_false&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="c1"&gt;# invece di&lt;/span&gt;
 &lt;span class="c1"&gt;# print “false!” unless aBoolean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il metodo &lt;code&gt;if_true&lt;/code&gt; di &lt;code&gt;TrueClass&lt;/code&gt; esegue il blocco che viene passato, mentre &lt;code&gt;if_false&lt;/code&gt; non fa nulla. La classe &lt;code&gt;FalseClass&lt;/code&gt; ha il comportamento opposto.&lt;/p&gt;
&lt;p&gt;Il bello di questo approccio è che non c’è nessun &lt;code&gt;if&lt;/code&gt;; è un po’ come uno &lt;a href="http://en.wikipedia.org/wiki/State_pattern"&gt;state pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Non capisco perché in Ruby gli &lt;code&gt;if&lt;/code&gt; non siano stati implementati in maniera analoga (mentre per i cicli è stato fatto): in teoria, qualunque linguaggio che supporti i blocchi permette di non dover creare keywords per le strutture di controllo del flusso.&lt;/p&gt;</content><category term="OOP"></category><category term="Spunti di riflessione"></category><category term="Preferiti"></category><category term="Ruby"></category></entry><entry><title>Messaging</title><link href="http://blog.riccardomarotti.com/post/2594367651/just-a-gentle-reminder-that-i-took-some-pains-at" rel="alternate"></link><published>2011-01-04T12:01:00+01:00</published><updated>2011-01-04T12:01:00+01:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2011-01-04:/post/2594367651/just-a-gentle-reminder-that-i-took-some-pains-at</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Just a gentle reminder that I took some pains at the last OOPSLA to try to remind everyone that Smalltalk is not only NOT its syntax or the class library, it is not even about classes. I’m sorry that I long ago coined the term “objects” for this topic …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Just a gentle reminder that I took some pains at the last OOPSLA to try to remind everyone that Smalltalk is not only NOT its syntax or the class library, it is not even about classes. I’m sorry that I long ago coined the term “objects” for this topic because it gets many people to focus on the lesser idea.&lt;/p&gt;
&lt;p&gt;The big idea is “messaging” - that is what the kernal of Smalltalk/Squeak is all about.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html"&gt;Queste considerazioni&lt;/a&gt; di &lt;a href="http://it.wikipedia.org/wiki/Alan_Kay"&gt;Alan Kay&lt;/a&gt; fanno capire quanto siano poco interessanti i &lt;a href="http://it.wikipedia.org/wiki/Class_Diagram"&gt;Class Diagram&lt;/a&gt;, che pongono l’accento sulla struttura delle classi, e quanto siano importanti i &lt;a href="http://it.wikipedia.org/wiki/Communication_Diagram"&gt;Communication Diagram&lt;/a&gt;, che lo pongono sullo scambio dei messaggi tra gli oggetti.&lt;/p&gt;</content><category term="OOP"></category></entry><entry><title>Tip del giorno: "unable to configure leaks on instruments for target process"</title><link href="http://blog.riccardomarotti.com/post/2400105707/tip-del-giorno-unable-to-configure-leaks-on" rel="alternate"></link><published>2010-12-21T09:48:00+01:00</published><updated>2010-12-21T09:48:00+01:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-12-21:/post/2400105707/tip-del-giorno-unable-to-configure-leaks-on</id><summary type="html">&lt;p&gt;Se lanciando &lt;a target="_blank" href="http://en.wikipedia.org/wiki/Instruments_(application)"&gt;Instruments&lt;/a&gt;, alla ricerca di memory leaks, ti succede questo:&lt;/p&gt;

&lt;p&gt;&amp;#13;
&lt;p&gt;&lt;img src="/images/instruments.png" /&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;probabilmente devi solo staccare l'iPhone/iPad dalla porta usb.&lt;/p&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se lanciando &lt;a target="_blank" href="http://en.wikipedia.org/wiki/Instruments_(application)"&gt;Instruments&lt;/a&gt;, alla ricerca di memory leaks, ti succede questo:&lt;/p&gt;

&lt;p&gt;&amp;#13;
&lt;p&gt;&lt;img src="/images/instruments.png" /&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;probabilmente devi solo staccare l'iPhone/iPad dalla porta usb.&lt;/p&gt;&lt;/p&gt;</content></entry><entry><title>Guida TV minimalista</title><link href="http://blog.riccardomarotti.com/post/1215146887/guidatv" rel="alternate"></link><published>2010-09-30T00:00:00+02:00</published><updated>2010-09-30T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-09-30:/post/1215146887/guidatv</id><summary type="html">&lt;p&gt;Volevo una singola pagina, che mi permettesse, senza dover cliccare mille link, scrollare pagine lunghissime, o usare applicazione flash dall’usabilità discutibile, di vedere i programmi tv della serata, per tutti canali che mi interessano .&lt;/p&gt;
&lt;p&gt;Non sono riuscito a trovarla, per cui me la sono fatta, ed è questa:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://guidatv.herokuapp.com/"&gt;https …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Volevo una singola pagina, che mi permettesse, senza dover cliccare mille link, scrollare pagine lunghissime, o usare applicazione flash dall’usabilità discutibile, di vedere i programmi tv della serata, per tutti canali che mi interessano .&lt;/p&gt;
&lt;p&gt;Non sono riuscito a trovarla, per cui me la sono fatta, ed è questa:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://guidatv.herokuapp.com/"&gt;https://guidatv.herokuapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;È un’applicazione che raccoglie i dati dei programmi in giro per la rete, e li mostra, si spera senza troppi errori (non sono un mago delle regular expression), in una singola pagina. È anche possibile vedere la programmazione completa dei singoli canali.&lt;/p&gt;
&lt;p&gt;Questo esercizietto, oltre a fornirmi un servizio che mi mancava, mi ha permesso di scoprire come funziona &lt;a href="http://www.heroku.com/"&gt;Heroku&lt;/a&gt;, che, devo dire, non è niente male.&lt;/p&gt;
&lt;p&gt;Nella fattispecie, mi ha permesso di pubblicare un’applicazione fatta con &lt;a href="http://camping.rubyforge.org/"&gt;Camping&lt;/a&gt;, con accesso a un database, e un cron giornaliero che aggiorna i dati. Niente male per zero euro.&lt;/p&gt;
&lt;p&gt;Se qualcuno la trova utile, o la troverebbe utile se solo avesse quella tal feature, può mandarmi una mail, o commentare qui sotto.&lt;/p&gt;</content><category term="Ruby"></category></entry><entry><title>Tip - Includere un framework in un progetto XCode</title><link href="http://blog.riccardomarotti.com/post/1096272870/framework-tip" rel="alternate"></link><published>2010-09-10T00:00:00+02:00</published><updated>2010-09-10T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-09-10:/post/1096272870/framework-tip</id><summary type="html">&lt;p&gt;Quando si include un framework esterno in un progetto XCode, per esempio, GData, anche se compila tutto, può succedere che, una volta eseguita l’applicazione, ci sia un crash con un errore del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dyld&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Library&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;loader_path&lt;/span&gt;&lt;span class="sr"&gt;/../Frameworks/GData.framework/&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Referenced&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;dell&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;eseguibile&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;not …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Quando si include un framework esterno in un progetto XCode, per esempio, GData, anche se compila tutto, può succedere che, una volta eseguita l’applicazione, ci sia un crash con un errore del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dyld&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Library&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;loader_path&lt;/span&gt;&lt;span class="sr"&gt;/../Frameworks/GData.framework/&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Referenced&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;dell&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;eseguibile&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Questo succede perché l’eseguibile, linkato dinamicamente con il framework, non trova la libreria a runtime. Infatti la directory Frameworks non esiste all’interno del bundle dell’eseguibile.&lt;/p&gt;
&lt;p&gt;Per creare la directory e copiare al suo interno la libreria, basta aggiungere un “Copy Files Build Phase” (Click destro sul target, poi &lt;code&gt;Add -&amp;gt; New Build Phase -&amp;gt; New Copy Files Build Phase&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="ima1" src="/images/framework-tip-1.png"&gt;&lt;/p&gt;
&lt;p&gt;e assicurarsi di selezionare Frameworks come Destination&lt;/p&gt;
&lt;p&gt;&lt;img alt="ima2" src="/images/framework-tip-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Ora basta draggare il framework nel passo appena creato&lt;/p&gt;
&lt;p&gt;&lt;img alt="ima3" src="/images/framework-tip-3.png"&gt;&lt;/p&gt;
&lt;p&gt;In questo modo, la libreria sarà copiata opportunamente, e non ci saranno sorprese a runtime.&lt;/p&gt;</content><category term="XCode"></category></entry><entry><title>Sulla semplicità</title><link href="http://blog.riccardomarotti.com/post/1090868184/semplicita" rel="alternate"></link><published>2010-09-09T11:12:00+02:00</published><updated>2010-09-09T11:12:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-09-09:/post/1090868184/semplicita</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tutto dovrebbe essere reso il più semplice possibile, ma non più semplice.&lt;/p&gt;
&lt;p&gt;Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ho letto un interessante &lt;a href="http://www.jnd.org/dn.mss/simplicity_is_highly_overrated.html"&gt;post&lt;/a&gt; di &lt;a href="http://www.jnd.org/"&gt;Don Norman&lt;/a&gt; sulla sopravvalutazione della semplicità.&lt;/p&gt;
&lt;p&gt;Mi sembra molto controcorrente, dato che, negli ultimi tempi, sono tutti fan della semplicità a tutti i costi.&lt;/p&gt;
&lt;p&gt;In sintesi, il discorso è: la …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Tutto dovrebbe essere reso il più semplice possibile, ma non più semplice.&lt;/p&gt;
&lt;p&gt;Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ho letto un interessante &lt;a href="http://www.jnd.org/dn.mss/simplicity_is_highly_overrated.html"&gt;post&lt;/a&gt; di &lt;a href="http://www.jnd.org/"&gt;Don Norman&lt;/a&gt; sulla sopravvalutazione della semplicità.&lt;/p&gt;
&lt;p&gt;Mi sembra molto controcorrente, dato che, negli ultimi tempi, sono tutti fan della semplicità a tutti i costi.&lt;/p&gt;
&lt;p&gt;In sintesi, il discorso è: la gente non vuole le cose semplici; non è disposta a spendere di più per una lavatrice che ha un solo pulsante, dato che è tutto automatico, piuttosto che una che ha mille manopole e pulsanti. L’impressione è che quella che ha un solo pulsante valga meno di quella complicata. Penso che questo sia vero, anche se paradossale.&lt;/p&gt;
&lt;p&gt;Un esempio molto italiano è il cambio automatico: gli Italiani non vogliono il cambio automatico, nonostante la totale inutilità del cambio manuale. La cosa semplice, il cambio automatico, non è &lt;em&gt;cool&lt;/em&gt;. Per un Italiano, guidare un’auto col cambio automatico è poco virile. Senza cambio non ci si diverte. Etc…&lt;/p&gt;
&lt;p&gt;Penso che l’errore sia generalizzare questo concetto. È vero che ci sono molti casi in cui le persone non vogliono le cose semplici, ma preferiscono quelle complicate: questo non significa che sia vero in qualunque contesto.&lt;/p&gt;
&lt;p&gt;Ci sono oggetti di grande successo che hanno introdotto una notevole semplificazione; l’iPhone è il caso più eclatante. Paragonato a un Blackberry, penso sia evidente qual è l’oggetto più semplice.&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone" src="/images/semplicita-1.jpg"&gt;
&lt;img alt="bb" src="/images/semplicita-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Ma, in questo caso, l’oggetto più semplice è anche quello di maggior successo.&lt;/p&gt;
&lt;p&gt;Porto un esempio personale: qualche tempo fa ho avuto la necessità di &lt;em&gt;rippare&lt;/em&gt; dei dvd. Ad una prima ricerca ho trovato un software chiamato &lt;a href="http://handbrake.fr/"&gt;Handbrake&lt;/a&gt;. Installato e aperto, questa è la finestra che si propone:&lt;/p&gt;
&lt;p&gt;&lt;img alt="handbrake_image" src="/images/semplicita-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Non che sia impossibile comprendere il funzionamento, ma io dovevo solo rippare un dvd.&lt;/p&gt;
&lt;p&gt;Successivamente ho scoperto &lt;a href="http://thelittleappfactory.com/ripit/"&gt;Rip-it&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ripit" src="/images/semplicita-4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Un pulsante che fa quello che chiedo, senza configurazioni o settaggi particolari.La mia scelta è ricaduta su Rip-it. In ogni caso, sono sicuro che ci sono persone che preferiscono Handbrake, dato che è più configurabile e ti dà il potere di fare qualunque cosa. È una questione di approccio.&lt;/p&gt;
&lt;p&gt;Semplificando molto, esistono due grandi tipologie di utenti:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tipo 1&lt;/em&gt;: voglio l’oggetto che mi elevi di status, quindi voglio la lavatrice supercomplicata e costosissima, che lasci a me il controllo. Voglio il cambio manuale, perché sono io che decido, non una stupida auto.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Tipo 2&lt;/em&gt;: voglio l’oggetto che mi dia meno da pensare, che anche un demente potrebbe usare con profitto, quindi voglio il cambio automatico, voglio rip-it, e così via.&lt;/p&gt;
&lt;p&gt;Probabilmente, statisticamente, prevalgono gli utenti di tipo 1, almeno da quando risulta dall’articolo di Don Norman.&lt;/p&gt;
&lt;p&gt;In ogni caso, un oggetto come l’iPhone accontenta entrambe le tipologie di utenti, essendo più semplice e più &lt;em&gt;figo&lt;/em&gt; degli altri telefoni.&lt;/p&gt;
&lt;p&gt;La verità è che è difficile fare le cose più semplici e più funzionali allo stesso tempo, per cui ci si ritrova ad accontentare soltanto una delle tipologie di utenti.&lt;/p&gt;
&lt;p&gt;Comunque sia, la semplicità non deve essere a scapito della funzionalità. Tutti sono capaci di semplificare eliminando funzionalità: la sfida è semplificare lasciando le funzionalità inalterate, o, addirittura, aumentandole.&lt;/p&gt;</content></entry><entry><title>Punti di vista</title><link href="http://blog.riccardomarotti.com/post/1080258933/punti-di-vista" rel="alternate"></link><published>2010-09-07T00:00:00+02:00</published><updated>2010-09-07T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-09-07:/post/1080258933/punti-di-vista</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Follia è fare sempre la stessa cosa e aspettarsi risultati diversi.&lt;/p&gt;
&lt;p&gt;Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ho sempre avuto difficoltà insormontabili nel versare il latte, o i succhi di frutta, con contenitori di questo tipo, quando sono ancora pieni:&lt;/p&gt;
&lt;p&gt;&lt;img alt="latte" src="/images/punti-di-vista-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Il latte tende a gorgogliare e raramente l’unico obiettivo raggiunto è la tazza …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Follia è fare sempre la stessa cosa e aspettarsi risultati diversi.&lt;/p&gt;
&lt;p&gt;Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ho sempre avuto difficoltà insormontabili nel versare il latte, o i succhi di frutta, con contenitori di questo tipo, quando sono ancora pieni:&lt;/p&gt;
&lt;p&gt;&lt;img alt="latte" src="/images/punti-di-vista-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Il latte tende a gorgogliare e raramente l’unico obiettivo raggiunto è la tazza.&lt;/p&gt;
&lt;p&gt;&lt;img alt="latte_gorgoglia" src="/images/punti-di-vista-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Ho cercato, per anni, di capire come si possa evitare il suddetto problema, provando a versare lentamente, velocemente, premendo il cartone, stando attento a non premerlo, e così via… Ho sempre pensato che chi costruisce questi aggeggi dovrebbe cambiare mestiere…&lt;/p&gt;
&lt;p&gt;Poi qualcuno mi ha detto: “basta versarlo al contrario”. Ho provato e  non ho versato una goccia dove non dovevo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="latte_funziona" src="/images/punti-di-vista-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Spesso, più spesso di quanto si creda, la soluzione a un problema è semplicissima e sta sotto i propri occhi, ma ci si fissa su un approccio, continuando a sbagliare all’infinito; magari, dando anche la colpa agli altri dei propri fallimenti.&lt;/p&gt;
&lt;p&gt;A volte, basta solo saper cercare la prospettiva giusta, e tutto diventa semplice.&lt;/p&gt;</content><category term="Spunti di riflessione"></category></entry><entry><title>Migliorare il design grazie agli oggetti immutabili</title><link href="http://blog.riccardomarotti.com/post/711204747/migliorare-il-design-grazie-agli-oggetti-immutabili" rel="alternate"></link><published>2010-06-18T00:00:00+02:00</published><updated>2010-06-18T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-06-18:/post/711204747/migliorare-il-design-grazie-agli-oggetti-immutabili</id><summary type="html">&lt;p&gt;In &lt;a href="http://www.erlang.org/"&gt;Erlang&lt;/a&gt; non esistono le variabili a cui siamo abituati. All’interno di uno scope, si può assegnare un valore a una variabile una sola volta. Questo approccio, tipico dei linguaggi funzionali, aiuta a ridurre gli effetti collaterali (side-effects).&lt;/p&gt;
&lt;p&gt;Una funzione è detta &lt;a href="http://en.wikipedia.org/wiki/Pure_function"&gt;pura&lt;/a&gt;, cioè senza effetti collaterali, se, dato …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="http://www.erlang.org/"&gt;Erlang&lt;/a&gt; non esistono le variabili a cui siamo abituati. All’interno di uno scope, si può assegnare un valore a una variabile una sola volta. Questo approccio, tipico dei linguaggi funzionali, aiuta a ridurre gli effetti collaterali (side-effects).&lt;/p&gt;
&lt;p&gt;Una funzione è detta &lt;a href="http://en.wikipedia.org/wiki/Pure_function"&gt;pura&lt;/a&gt;, cioè senza effetti collaterali, se, dato un input, il suo output è sempre lo stesso, indipendentemente dal contesto in cui viene eseguita.&lt;/p&gt;
&lt;p&gt;Proviamo a trasferire nel mondo a oggetti questi concetti: dato un oggetto immutabile, cioè un oggetto che non può cambiare il suo stato, tutti i suoi metodi che restituiscono un valore saranno funzioni pure.&lt;/p&gt;
&lt;p&gt;Vediamo cosa accade se usiamo solo oggetti immutabili in un semplice esempio: come rappresentare una traiettoria, cioè un insieme ordinato di punti.&lt;/p&gt;
&lt;p&gt;La prima cosa che viene in mente, per l’implementazione, è mantenere una lista di punti all’interno di un oggetto e, a ogni chiamata di un metodo, per esempio &lt;code&gt;Move&lt;/code&gt;, viene aggiunto un punto a questa lista:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Trajectory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="no"&gt;Move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CurrentX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CurrentY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="no"&gt;CurrentX&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="no"&gt;CurrentY&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il metodo &lt;code&gt;Move&lt;/code&gt; non è una funzione, ma una procedura; inoltre non è privo di effetti collaterali: se, una volta istanziata la traiettoria, lo invoco N volte con gli stessi parametri, ottengo N cambi di stato.&lt;/p&gt;
&lt;p&gt;Allora rendiamo la traiettoria un oggetto immutabile.&lt;/p&gt;
&lt;p&gt;La prima domanda che sorge è: come si gestiscono i cambiamenti di stato? Ogni cambiamento di stato corrisponde alla creazione di un nuovo oggetto.&lt;/p&gt;
&lt;p&gt;Allora, facciamo in modo che, a ogni chiamata a Move, venga creata una nuova traiettoria:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Trajectory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="no"&gt;Trajectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; &lt;span class="no"&gt;Trajectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="no"&gt;Trajectory&lt;/span&gt; &lt;span class="no"&gt;Move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;Trajectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CurrentX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CurrentY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="no"&gt;CurrentX&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="no"&gt;CurrentY&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/pre&gt;
La nuova traiettoria sarà una copia della precedente, con il nuovo punto aggiunto.&lt;/p&gt;
&lt;p&gt;Il nuovo metodo &lt;code&gt;Move&lt;/code&gt; è diventato una funzione pura: una volta istanziata una traiettoria, invocandolo N volte con gli stessi parametri, ottengo sempre lo stesso risultato. Tant’è che la nuova traiettoria è un oggetto immutabile.&lt;/p&gt;
&lt;p&gt;Il prossimo passo è rendere questo codice più object oriented. Perché non lo è tanto? Vengono usati tre oggetti: &lt;code&gt;Trajectory&lt;/code&gt;, &lt;code&gt;Point&lt;/code&gt; e &lt;code&gt;List&lt;/code&gt;. Però Point e List non fanno nulla: si limitano a mantenere uno stato &lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Da notare che è stata l’introduzione dell’immutabilità che ha rimosso l’unica azione fatta dall’oggetto &lt;code&gt;List&lt;/code&gt;, cioè la chiamata al metodo &lt;code&gt;Add&lt;/code&gt;, evidenziandone l’inutilità.&lt;/p&gt;
&lt;p&gt;L’unico comportamento presente è quello rappresentato dal metodo &lt;code&gt;Move&lt;/code&gt;. Quindi dovrà esserci un solo tipo di oggetto, che implementi il metodo Move e mantenga lo stato dei punti.&lt;/p&gt;
&lt;p&gt;Questo è un possibile approccio: cominciamo con un’interfaccia &lt;code&gt;IPoint&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="no"&gt;IPoint&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="no"&gt;IPoint&lt;/span&gt; &lt;span class="no"&gt;Move&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Si vede che il metodo &lt;code&gt;Move&lt;/code&gt; restiruisce un punto, questo perché, a ogni sua invocazione, per mantenere l’immutabilità, se ne deve creare uno nuovo.&lt;/p&gt;
&lt;p&gt;Definiamo il punto iniziale, cioè quello di coordinate (0,0):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StartPoint&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IPoint&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="no"&gt;IPoint&lt;/span&gt; &lt;span class="no"&gt;Move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;RelativePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La classe &lt;code&gt;RelativePoint&lt;/code&gt;, istanziata dal metodo &lt;code&gt;Move&lt;/code&gt;, sarà una cosa del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RelativePoint&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IPoint&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;IPoint&lt;/span&gt; &lt;span class="n"&gt;previousPoint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="no"&gt;RelativePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;IPoint&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;previousPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delta_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delta_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;previousPoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;previousPoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="no"&gt;IPoint&lt;/span&gt; &lt;span class="no"&gt;Move&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="no"&gt;RelativePoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta_y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In questo modo, il concetto di traiettoria non è stato modellato utilizzando una classe che la rappresenta, cioè una struttura, ma tramite lo scambio di messaggi tra gli oggetti che la compongono, i punti&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Molto semplice, e molto object oriented&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lo stato del sistema&lt;/strong&gt;, la traiettoria, &lt;strong&gt;è definito solo dall’interazione tra oggetti&lt;/strong&gt; (immutabili), i punti.&lt;/p&gt;
&lt;p&gt;In generale, forzandosi a utilizzare oggetti immutabili, viene più naturale sviluppare il design in questa direzione, cioè verso lo sfruttamento dell’interazione tra oggetti, anziché della loro struttura.&lt;/p&gt;
&lt;p&gt;In un contesto così semplice, è difficile apprezzare i vantaggi di questo approccio però possiamo vedere, per esempio, l’implementazione della rimozione dell’ultimo punto della traiettoria per il design a oggetti:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="no"&gt;IPoint&lt;/span&gt; &lt;span class="no"&gt;RemoveLast&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="no"&gt;StartPoint&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="no"&gt;IPoint&lt;/span&gt; &lt;span class="no"&gt;RemoveLast&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="no"&gt;RelativePoint&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;previousPoint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;e per quello procedurale:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="no"&gt;RemoveLast&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cos’è meglio?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;“Object-oriented computation is about the exchange of messages between objects. The purpose is to create objects and to send objects back and forth via messages” (&lt;a href="http://www.ccs.neu.edu/home/matthias/Presentations/ecoop2004.pdf"&gt;http://www.ccs.neu.edu/home/matthias/Presentations/ecoop2004.pdf&lt;/a&gt;).&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Attenzione perché, compilando in Debug, la ricorsione porta facilmente ad avere delgli stack overflow, già con 100.000 punti. Compilando in Release, viene effettuata la &lt;a href="http://en.wikipedia.org/wiki/Tail_call"&gt;tail-call optimization&lt;/a&gt;, per cui non ci sono limiti alla ricorsione, se non quelli imposti dalla memoria del sistema.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;L’eliminazione della duplicazione del metodo &lt;code&gt;Move&lt;/code&gt; è un semplice esercizio, che viene lasciato al lettore :)&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="C"></category><category term="Erlang"></category><category term="Linguaggi funzionali"></category><category term="OOP"></category><category term="Oggetti immutabili"></category><category term="Preferiti"></category></entry><entry><title>Il mito del focus</title><link href="http://blog.riccardomarotti.com/post/663286619/il-mito-del-focus" rel="alternate"></link><published>2010-06-04T00:00:00+02:00</published><updated>2010-06-04T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-06-04:/post/663286619/il-mito-del-focus</id><summary type="html">&lt;p&gt;Esistono due approcci per risolvere problemi: quello dell’emisfero cerebrale sinistro e quello dell’emisfero destro.&lt;/p&gt;
&lt;p&gt;L’emisfero sinistro è quello logico e sequenziale. Quello destro è quello &lt;a href="http://it.wiktionary.org/wiki/euristico"&gt;euristico&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;L’approccio logico richiede che il problema sia già noto, e che si debba, di fatto, semplicemente applicare un algoritmo per …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Esistono due approcci per risolvere problemi: quello dell’emisfero cerebrale sinistro e quello dell’emisfero destro.&lt;/p&gt;
&lt;p&gt;L’emisfero sinistro è quello logico e sequenziale. Quello destro è quello &lt;a href="http://it.wiktionary.org/wiki/euristico"&gt;euristico&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;L’approccio logico richiede che il problema sia già noto, e che si debba, di fatto, semplicemente applicare un algoritmo per arrivare alla soluzione.&lt;/p&gt;
&lt;p&gt;Un problema ancora senza soluzione richiede creatività.&lt;/p&gt;
&lt;p&gt;La creatività risiede nell’emisfero destro.&lt;/p&gt;
&lt;p&gt;Solo un approccio non sequenziale, non necessariamente logico, può permettere di trovare soluzioni a problemi ignoti o di trovarne di nuove per quelli noti.&lt;/p&gt;
&lt;p&gt;Per problemi di questo tipo, essere troppo focalizzati è controproducente. La concentrazione attiva l’emisfero sinistro, che non è in grado di creare.&lt;/p&gt;
&lt;p&gt;Credo sia capitato a chiunque di andare a letto senza riuscire a risolvere un problema per poi svegliarsi la mattina con la soluzione in testa. Penso che dormire sia qualcosa di molto lontano dall’essere focalizzato su un problema :)&lt;/p&gt;
&lt;p&gt;Questo spiega perché, per i lavori creativi, le ricompense economiche fanno produrre risultati inferiori, rispetto a quelli fatti semplicemente per passione.&lt;/p&gt;
&lt;p&gt;La ricompensa ci mette fretta e ci fa focalizzare sul problema, rendendoci meno creativi.&lt;/p&gt;
&lt;p&gt;Il focus uccide la creatività. È il relax che la alimenta.&lt;/p&gt;
&lt;p&gt;Tutto questo solo perché sento sempre parlare di focus e commitment (tipicamente dai manager) come di attributi fondamentali per il successo di un programmatore. Ritengo che la programmazione richieda capacità creative non trascurabili.&lt;/p&gt;
&lt;p&gt;Per cui, chiedere a un programmatore di essere sempre focalizzato, sempre “sul pezzo”, anche se può non sembrare, non è necessariamente una richiesta sensata.&lt;/p&gt;</content><category term="Spunti di riflessione"></category><category term="Creatività"></category></entry><entry><title>Paura eh?</title><link href="http://blog.riccardomarotti.com/post/643370529/paura-eh" rel="alternate"></link><published>2010-05-29T00:00:00+02:00</published><updated>2010-05-29T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-05-29:/post/643370529/paura-eh</id><summary type="html">&lt;p&gt;Ultimamente sono un po’ fissato con la paura: penso che sia fondamentale comprenderla il più possibile per avere successo, qualunque cosa significhi per ognuno di noi.&lt;/p&gt;
&lt;p&gt;Ma cos’è la paura? È un meccanismo che ci permette, in situazioni di pericolo, di prendere decisioni molto velocemente, allo scopo di sopravvivere …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ultimamente sono un po’ fissato con la paura: penso che sia fondamentale comprenderla il più possibile per avere successo, qualunque cosa significhi per ognuno di noi.&lt;/p&gt;
&lt;p&gt;Ma cos’è la paura? È un meccanismo che ci permette, in situazioni di pericolo, di prendere decisioni molto velocemente, allo scopo di sopravvivere.&lt;/p&gt;
&lt;p&gt;Per poter essere rapidissimi nel prendere questa decisione, la paura ci spinge a semplificare il contesto in cui siamo.&lt;/p&gt;
&lt;p&gt;Faccio un esempio: i cavalli sono prede e, in quanto tali, basano la loro sopravvivenza sulla fuga. Se, in un branco, un cavallo comincia a correre, perché ha percepito un pericolo, gli altri lo seguono senza accertarsi che ci sia davvero un motivo per farlo. La decisione di fuggire è presa senza verificare la ragione che ha generato la fuga, cioè semplificando il contesto. E i pochi decimi di secondo risparmiati possono fare la differenza tra la vita e la morte.&lt;/p&gt;
&lt;p&gt;A quel punto, o si è sprecata un po’ di energia per una fuga inutile, oppure si sono aumentate le probabilità di sopravvivenza. Poco elegante, ma efficace.&lt;/p&gt;
&lt;p&gt;Questo meccanismo di semplificazione del contesto non vale solo per l’ambiente preda/predatore, ma vale anche per noi esseri umani. E vale anche nel contesto programmatore/cliente.&lt;/p&gt;
&lt;p&gt;Quando si avvicina una scadenza, si inizia a sentire il pericolo e la paura entra in azione per tirarcene fuori il prima possibile. E cominciano a saltare le pratiche. &lt;/p&gt;
&lt;p&gt;Il pair &lt;strong&gt;programming&lt;/strong&gt;: si inizia a pensare che lavorando da soli si produca di più. Si può pensare che si produce di più da soli, solo se si assume che i programmatori siano tutti infallibili e iper creativi. Questa è una semplificazione del contesto.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;retrospective&lt;/strong&gt;: una riunione che abbatte la produttività di mezza giornata. Questo, forse, ha senso per il breve termine, ma nel lungo termine sappiamo bene che non è così. Altra semplificazione. &lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;test&lt;/strong&gt;: devo scrivere del codice in più, quindi perdo tempo. Non credo serva spiegare che non è così, ma semplificando il contesto, questa affermazione diventa vera.&lt;/p&gt;
&lt;p&gt;E così via. &lt;/p&gt;
&lt;p&gt;A volte le pratiche possono essere controintuitive, e, se spinti dalla paura, si fa la cosa più semplice e che ha un effetto immediato. &lt;/p&gt;
&lt;p&gt;Se lo scopo è sopravvivere anziché morire, la decisione istintiva è chiaramente quella migliore. Ma nel contesto dello sviluppo software, la decisione che ha un effetto positivo nell’immediato, quella indotta dalla paura, può portare a effetti molto negativi nel lungo periodo.&lt;/p&gt;
&lt;p&gt;Ecco perché il coraggio è così importante per gli agilisti. Però attenzione: il coraggio è il saper controllare la paura, senza semplificazioni di contesto. Non è il non aver paura: l’assenza di paura è incoscienza, che è anche peggiore della paura incontrollata.&lt;/p&gt;</content><category term="Agile"></category><category term="Paura"></category><category term="Spunti di riflessione"></category><category term="Preferiti"></category></entry><entry><title>Talento o pigrizia?</title><link href="http://blog.riccardomarotti.com/post/603304271/talento-o-pigrizia" rel="alternate"></link><published>2010-05-16T11:21:00+02:00</published><updated>2010-05-16T11:21:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-05-16:/post/603304271/talento-o-pigrizia</id><summary type="html">&lt;p&gt;Quando si parla di metodi agili, generalmente, tutti dicono che adattano leggermente le pratiche alla propria realtà e alle proprie esigenze. &lt;/p&gt;
&lt;p&gt;Sono convinto che, mano a mano che si cresce, si possa, anzi, si debba adattare il metodo alle proprie peculiarità, con lo scopo di essere più efficaci. Il metodo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quando si parla di metodi agili, generalmente, tutti dicono che adattano leggermente le pratiche alla propria realtà e alle proprie esigenze. &lt;/p&gt;
&lt;p&gt;Sono convinto che, mano a mano che si cresce, si possa, anzi, si debba adattare il metodo alle proprie peculiarità, con lo scopo di essere più efficaci. Il metodo, in generale, serve agli inesperti: più aumenta l’esperienza, più aumentano la sensibilità e la capacità di capire quale sia la cosa migliore caso per caso.&lt;/p&gt;
&lt;p&gt;Estremizzando, il metodo diventa un freno che imbriglia il talento.&lt;/p&gt;
&lt;p&gt;Spesso però, gli adattamenti che si fanno sono dettati dalla pigrizia e dalla paura, non dall’esperienza.&lt;/p&gt;
&lt;p&gt;Mi viene in mente la retrospective: si tende a farla di rado perché è la prima cosa che salta quando si è stretti con i tempi. Questa è paura. &lt;/p&gt;
&lt;p&gt;Una delle pratiche più storpiate è la tecnica del pomodoro: si tende ad allungare i tempi.&lt;/p&gt;
&lt;p&gt;Un classico è il pomodoro da 50 minuti… Generalmente la scusa per questo è che interrompersi dopo soli venticinque minuti è fastidioso.&lt;/p&gt;
&lt;p&gt;Secondo me è solo per avere pause più lunghe, infatti spesso sentirete anche dire che in cinque minuti non riesci neanche a controllare la posta. Ma lo scopo del pomodoro non sono le pause. Questa è pigrizia.&lt;/p&gt;
&lt;p&gt;Si possono fare molti altri esempi, ma, in generale, qualunque modifica che richieda un impegno minore rispetto alla pratica “by the book”, sarebbe meglio non farla.&lt;/p&gt;
&lt;p&gt;Gli sconti è meglio chiederli quando si compra, non quando si programma :)&lt;/p&gt;</content><category term="Agile"></category><category term="Metodi"></category><category term="Spunti di riflessione"></category></entry><entry><title>(fr)Agile?</title><link href="http://blog.riccardomarotti.com/post/573406958/fr-agile" rel="alternate"></link><published>2010-05-05T00:00:00+02:00</published><updated>2010-05-05T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-05-05:/post/573406958/fr-agile</id><summary type="html">&lt;p&gt;Negli ultimi cinque anni ho fatto parte di due team agili. Secondo la mia esperienza, osservando la realtà senza preconcetti, dovrei aver dedotto che l’agile non funziona, o non serve.&lt;/p&gt;
&lt;p&gt;Su cosa si dovrebbe basare un giudizio sulle pratiche agili? Penso, principalmente, sulla soddisfazione degli utenti finali del software …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Negli ultimi cinque anni ho fatto parte di due team agili. Secondo la mia esperienza, osservando la realtà senza preconcetti, dovrei aver dedotto che l’agile non funziona, o non serve.&lt;/p&gt;
&lt;p&gt;Su cosa si dovrebbe basare un giudizio sulle pratiche agili? Penso, principalmente, sulla soddisfazione degli utenti finali del software prodotto. Beh, non ricordo un cliente veramente soddisfatto. I casi emblematici sono due.&lt;/p&gt;
&lt;p&gt;Uno: gli utenti erano più contenti prima che arrivasse l’agile, perché allora, quando qualcuno aveva un problema, faceva una telefonata e arrivava uno sviluppatore, che sistemava l’eventuale bug, e installava al volo un eseguibile dell’applicazione sul pc dell’utente. Con gli “Agili”, occorre più tempo per avere il fix, e, una volta sistemato il bug, si deve aspettare il “prossimo rilascio”. Prima l’utente era operativo da subito, senza attendere lo svolgersi di quella che viene percepita come burocrazia.&lt;/p&gt;
&lt;p&gt;Due: il cliente critica il team agile perché, a fronte di un costo maggiore degli altri, non presenta una maggiore efficacia. Stessi risultati dei “non agili”, costi maggiori.&lt;/p&gt;
&lt;p&gt;Allora si potrebbe spostare l’attenzione sulla qualità interna e dire: “sì però il codice prodotto è sicuramente di qualità!” No. Spesso è clamorosamente complesso, complice quella patternite di cui soffrono, non di rado, gli agilisti.&lt;/p&gt;
&lt;p&gt;L’idea che basti una serie di pratiche per avere codice semplice, con un buon design, è sbagliata. Non sono il TDD o il pair programming (o qualunque altra pratica) che ti fanno scrivere codice di pregio. Il design non emerge da solo grazie alle pratiche. Il design deve essere prima nella testa di chi programma. E se chi programma non è in grado di creare software semplice, non saranno le pratiche a permettergli di farlo. &lt;/p&gt;
&lt;p&gt;Una frase che ho sentito spesso, per giustificare l’insoddisfazione del cliente, suona più o meno così: “noi siamo molto migliori degli altri, ma non riusciamo a dimostrarlo”. Beh, essere bravi senza riuscire a dimostrarlo equivale a non essere bravi affatto. &lt;/p&gt;
&lt;p&gt;Personalmente, l’unico vero vantaggio che ho percepito nel lavorare in modo agile è stato che il lavoro era molto meno stressante di quanto non sarebbe stato diversamente. Modificare il codice con relativa tranquillità, grazie ai test, non ha prezzo. Secondo me, ottenere risultati analoghi agli altri, ma senza fare le notti e dormendo sonni tranquilli è già un ottimo risultato. Ma è sufficiente?&lt;/p&gt;</content><category term="Agile"></category><category term="Spunti di riflessione"></category></entry><entry><title>Come rimuovere un’applicazione dal dock</title><link href="http://blog.riccardomarotti.com/post/565367936/no-dock-application" rel="alternate"></link><published>2010-05-02T13:04:00+02:00</published><updated>2010-05-02T13:04:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-05-02:/post/565367936/no-dock-application</id><summary type="html">&lt;iframe width="500" height="281" src="http://www.youtube.com/embed/591xWdi-suA?wmode=transparent&amp;autohide=1&amp;egm=0&amp;hd=1&amp;iv_load_policy=3&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;showsearch=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Spike&lt;/strong&gt;: come rimuovere un’applicazione dal dock e aggiungere alla barra di stato un’icona per l’applicazione, con relativo menu.&lt;/p&gt;
&lt;p&gt;Questo video mostra i risultati del primo spike che ho fatto riguardo l’&lt;a href="/post/560768127/dropbox-sui-google-docs"&gt;applicazione&lt;/a&gt; simil Dropbox che sto sviluppando.&lt;/p&gt;
&lt;p&gt;Per rimuovere l’icona dal dock, è sufficiente impostare a …&lt;/p&gt;</summary><content type="html">&lt;iframe width="500" height="281" src="http://www.youtube.com/embed/591xWdi-suA?wmode=transparent&amp;autohide=1&amp;egm=0&amp;hd=1&amp;iv_load_policy=3&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;showsearch=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Spike&lt;/strong&gt;: come rimuovere un’applicazione dal dock e aggiungere alla barra di stato un’icona per l’applicazione, con relativo menu.&lt;/p&gt;
&lt;p&gt;Questo video mostra i risultati del primo spike che ho fatto riguardo l’&lt;a href="/post/560768127/dropbox-sui-google-docs"&gt;applicazione&lt;/a&gt; simil Dropbox che sto sviluppando.&lt;/p&gt;
&lt;p&gt;Per rimuovere l’icona dal dock, è sufficiente impostare a &lt;code&gt;True&lt;/code&gt; la property &lt;code&gt;Applicaion is Agent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Per aggiungere un'icona alla status bar, con relativo menu, bisogna configurare a run-time, per esempio nel metodo &lt;code&gt;awakeFromNib&lt;/code&gt; dell’application delegate&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, lo status item dell’applciazione:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;statusItem&lt;/span&gt; &lt;span class="nl"&gt;setMenu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;applicationMenu&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;statusItem&lt;/span&gt; &lt;span class="nl"&gt;setImage&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;NSImage&lt;/span&gt; &lt;span class="nl"&gt;imageNamed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nell’esempio ho usato l’icona di Dropbox:&lt;/p&gt;
&lt;p&gt;La musica è dei Blue Wave Theory, ed è reperibile su magnatune.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;Quando si lancia l'applicazione, viene costruito il grafo degli oggetti codificati nel file &lt;code&gt;.xib&lt;/code&gt; e vengono creati gli oggetti corrispondenti con le relative connessioni. Alla fine, prima di visualizzare l'applicazione, viene inviato il messaggio &lt;code&gt;awakeFromNib&lt;/code&gt; a tutti gli oggetti che rispondono a tale messaggio.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Video"></category><category term="Xcode"></category><category term="Objective C"></category></entry><entry><title>Dropbox sui Google Docs</title><link href="http://blog.riccardomarotti.com/post/560768127/dropbox-sui-google-docs" rel="alternate"></link><published>2010-05-01T06:11:00+02:00</published><updated>2010-05-01T06:11:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-05-01:/post/560768127/dropbox-sui-google-docs</id><summary type="html">&lt;blockquote&gt;&lt;/blockquote&gt;

&lt;p&gt;&amp;#13;
&amp;#13;
&lt;blockquote&gt;&amp;#13;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Nota&lt;/strong&gt;: ho sospeso lo sviluppo di questa applicazione, dato che le API di google per accedere ai documenti funzionano solo per i Google Apps Premier Account, che hanno un costo che rendono sostanzialmente inutile un’applicazione del genere. Se e quando tali API funzioneranno anche per account gratuiti, finirò il …&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;&lt;/blockquote&gt;

&lt;p&gt;&amp;#13;
&amp;#13;
&lt;blockquote&gt;&amp;#13;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Nota&lt;/strong&gt;: ho sospeso lo sviluppo di questa applicazione, dato che le API di google per accedere ai documenti funzionano solo per i Google Apps Premier Account, che hanno un costo che rendono sostanzialmente inutile un’applicazione del genere. Se e quando tali API funzioneranno anche per account gratuiti, finirò il lavoro.&lt;/em&gt;&lt;/p&gt;&amp;#13;
&lt;/blockquote&gt;&amp;#13;
&lt;p&gt;Oggi inizio ufficialmente lo sviluppo di un’applicazione che permetta di sincronizzare una directory locale con i Google Documents. In pratica vorrei fare una sorta di Dropbox che si appoggi a Google.&lt;/p&gt;&amp;#13;
&lt;p&gt;Perché? &lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;50GB con Dropbox costano 100$ l’anno&lt;/li&gt;&amp;#13;
&lt;li&gt;20GB sui Google Docs costano 5$ l’anno&lt;/li&gt;&amp;#13;
&lt;li&gt;80GB sui Google Docs costano 20$ l’anno.&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;Non credo servano ulteriori commenti :).&lt;/p&gt;&amp;#13;
&lt;p&gt;Come avevo detto &lt;a target="_blank" href="/post/537851192/ma-davvero-agli-italiani-non-interessa-il-tdd"&gt;precedentemente&lt;/a&gt;, vorrei riportare qui gli sviluppi dello sviluppo :)&lt;/p&gt;&amp;#13;
&lt;p&gt;Lo annuncio pubblicamente perché ritengo sia uno stimolo in più ad arrivare in fondo.&lt;/p&gt;&amp;#13;
&lt;p&gt;La prima cosa che farò è uno spike per capire come si possa creare un’applciazione che non appaia nel dock, ma solo nella barra del menu, esattamente come fa Dropbox (ma anche Time Machine, per esempio).&lt;/p&gt;&amp;#13;
&lt;p&gt;Poi farò un altro spike per capire a fondo come si può interagire con i docs da Objective C. &lt;/p&gt;&amp;#13;
&lt;p&gt;Poi inizierò a scrivere codice veramente: non ho ancora creato le carte, ma a grandi linee penso ci saranno tre temi principali:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;modulo per l’accesso ai docs&lt;/li&gt;&amp;#13;
&lt;li&gt;modulo con la logica di sincronizzazione&lt;/li&gt;&amp;#13;
&lt;li&gt;interfaccia grafica&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;Penso che, tra un mesetto (sia chiaro, non è una &lt;a target="_blank" href="/post/556460537/sulle-stime"&gt;stima&lt;/a&gt; ;), avrò bisogno di qualche beta tester: qualcuno si offre volontario?&lt;/p&gt;&lt;/p&gt;</content><category term="Objective C"></category><category term="Cocoa"></category></entry><entry><title>Sofismi sulle stime</title><link href="http://blog.riccardomarotti.com/post/556460537/sulle-stime" rel="alternate"></link><published>2010-04-28T00:00:00+02:00</published><updated>2010-04-28T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-04-28:/post/556460537/sulle-stime</id><summary type="html">&lt;p&gt;Penso che il pretendere di stimare quanto tempo occorre per creare qualcosa, sia lo specchio dell’esigenza di controllo che ha l’uomo su quello che ha intorno. Insomma, è lo specchio dell’insicurezza umana.&lt;/p&gt;
&lt;p&gt;Avete mai avuto a che fare con dei costruttori di case? Non esiste che consegnino …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Penso che il pretendere di stimare quanto tempo occorre per creare qualcosa, sia lo specchio dell’esigenza di controllo che ha l’uomo su quello che ha intorno. Insomma, è lo specchio dell’insicurezza umana.&lt;/p&gt;
&lt;p&gt;Avete mai avuto a che fare con dei costruttori di case? Non esiste che consegnino nei tempi pattuiti. Tre mesi di ritardo sono considerati un ottimo risultato. Eppure si costruiscono case da centinaia di anni: le tecniche e i tempi dovrebbero essere piuttosto noti. Invece no.&lt;/p&gt;
&lt;p&gt;Perché? Perché ci sono troppe variabili, su cui non si ha il minimo controllo, da tenere in considerazione.&lt;/p&gt;
&lt;p&gt;Per il software vale la stessa cosa. In più il software esiste da molto meno tempo.&lt;/p&gt;
&lt;p&gt;C’è un detto zen che dice più o meno: “La natura non ha fretta, ma tutto è portato a termine”. La natura, oltre a non avere fretta, non è neanche particolarmente precisa sulle date.&lt;/p&gt;
&lt;p&gt;Luoghi comuni come “non esistono più le mezze stagioni” esistevano già nel XVII secolo&lt;sup id="fnref-nota"&gt;&lt;a class="footnote-ref" href="#fn-nota"&gt;1&lt;/a&gt;&lt;/sup&gt;: le mezze stagioni non sono mai esistite. Le cose in natura avvengono con poca regolarità, anche se noi dobbiamo trovare la regolarità dappertutto (sempre a causa dell’insicurezza, che ci porta alla necessità di controllo, ovviamente illusorio).&lt;/p&gt;
&lt;p&gt;La natura non rispetta i tempi con precisione, ma segue delle regole precise e si sa con certezza che il tal fiore fiorirà, che il caldo arriverà, che quello che deve succedere succederà, anche se non si sa quando esattamente.&lt;/p&gt;
&lt;p&gt;Quello che voglio dire è che voler sapere con precisione quando si potrà consegnare una tal feature è futile. Non si può. Quello che possiamo fare è avere le idee ben chiare su quello che occorre, ed essere lenti ma inesorabili nel portarlo a termine, come fa la natura.&lt;/p&gt;
&lt;p&gt;Certo, un cliente non accetterà mai un discorso del genere, ma la realtà è questa.&lt;/p&gt;
&lt;p&gt;Io, come cliente di me stesso, pretendo solo di essere focalizzato su ciò che occorre fare; quindi di sapere che finirò quello che inizio, nel modo più efficiente possibile, realizzando tutto, &lt;strong&gt;e solo&lt;/strong&gt;, quello che è necessario.&lt;/p&gt;
&lt;p&gt;Ma non di sapere quando lo finirò con una precisione arbitraria.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-nota"&gt;
&lt;p&gt;“Qui in Italia è voce e querela comune che i mezzi tempi non vi son più, e in questo smarrimento di confini, non vi è più dubbio che il freddo acquista terreno. Io ho udito dire a mio padre che in sua gioventù a Roma, la mattina di pasqua di resurrezione ognuno si rivestiva da state.  Adesso chi non ha bisogno d’impegnar la camiciola, vi so dire che si guarda molto bene di non alleggerirsi della minima cosa di quelle ch’ei portava nel cuor dell’inverno”.  ~&lt;em&gt;Magalotti, Lettere familiari, parte I. lett. 28. Belmonte 9 Febbraio 1683&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref-nota" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Spunti di riflessione"></category><category term="Preferiti"></category></entry><entry><title>Perché Objective C?</title><link href="http://blog.riccardomarotti.com/post/551290299/perche-objective-c" rel="alternate"></link><published>2010-04-26T08:46:00+02:00</published><updated>2010-04-26T08:46:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-04-26:/post/551290299/perche-objective-c</id><summary type="html">&lt;p&gt;Premesso che sono fermamente convinto che&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools build productivity like keyboards build software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;penso che programmare con Objective C presenti molti vantaggi.&lt;/p&gt;
&lt;p&gt;Ma quali sono le peculiarità che lo rendono migliore della maggioranza degli altri linguaggi?&lt;/p&gt;
&lt;h3&gt;Messaggi&lt;/h3&gt;
&lt;p&gt;Gli oggetti sono manipolati inviando loro messaggi.&lt;/p&gt;
&lt;p&gt;Potrà sembrare banale, ma questo permette …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Premesso che sono fermamente convinto che&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools build productivity like keyboards build software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;penso che programmare con Objective C presenti molti vantaggi.&lt;/p&gt;
&lt;p&gt;Ma quali sono le peculiarità che lo rendono migliore della maggioranza degli altri linguaggi?&lt;/p&gt;
&lt;h3&gt;Messaggi&lt;/h3&gt;
&lt;p&gt;Gli oggetti sono manipolati inviando loro messaggi.&lt;/p&gt;
&lt;p&gt;Potrà sembrare banale, ma questo permette di fare cose molto sofisticate, come decidere a run-time come rispondere a un dato messaggio, oppure fare un broadcast del messaggio ad altri oggetti, e molto altro.&lt;/p&gt;
&lt;p&gt;Inoltre, almeno per me, pensare che un programma non è altro che un insieme di oggetti che si inviano messaggi, aiuta a scrivere software migliore, perché fa focalizzare sul comportamento del codice e non sulla sua struttura.&lt;/p&gt;
&lt;h3&gt;Semplicità&lt;/h3&gt;
&lt;p&gt;Di fatto si tratta di C, con in più gli oggetti e la sintassi per inviare messaggi tra loro. Nulla di più.&lt;/p&gt;
&lt;p&gt;Non ha tutte quelle features cosiddette &lt;em&gt;"avanzate"&lt;/em&gt;, che ha, per esempio, il C++ (templates, ereditarietà multipla, overloading, e chi più ne ha più ne metta).&lt;/p&gt;
&lt;h3&gt;Espressività&lt;/h3&gt;
&lt;p&gt;La sintassi dell’invio dei messaggi è incredibilmente &lt;a href="/post/540519014/asserzioni-in-objective-c"&gt;espressiva&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questo metodo Ruby&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pippo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in ObjC diventa&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="nl"&gt;insertString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;pippo&amp;quot;&lt;/span&gt; &lt;span class="nl"&gt;atIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quale si legge meglio?&lt;/p&gt;
&lt;h3&gt;Dinamico&lt;/h3&gt;
&lt;p&gt;I tipi vengono “risolti” a run-time (la parola chiave “id” significa “qualunque tipo”). Ecco perché non servono overloading &amp;amp; C.&lt;/p&gt;
&lt;h3&gt;Statico&lt;/h3&gt;
&lt;p&gt;Se lo desideri, i tipi sono risolti a “compile-time”: questo evita tutti i problemi dei linguaggi dinamici.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;La maggioranza di queste caratteristiche sono ereditate da Smalltalk: naturalmente penso che Smalltalk sia il miglior linguaggio mai creato ;).&lt;/p&gt;
&lt;p&gt;E allora perché non uso Smalltalk? Perché non mi soddisfa il look and feel delle applicazioni che produce. Essendo cross-platform, ha la sua versione delle finestre, dei bottoni, etc… Non si integra con il sistema.&lt;/p&gt;
&lt;p&gt;Ecco perché la mia scelta è Objective C/Cocoa per le applicazioni desktop, Smalltalk/&lt;a href="http://www.seaside.st/"&gt;Seaside&lt;/a&gt; per quelle web.&lt;/p&gt;</content><category term="Objective C"></category><category term="Smalltalk"></category><category term="Robe da nerd"></category><category term="Seaside"></category></entry><entry><title>TDD con Xcode</title><link href="http://blog.riccardomarotti.com/post/547615337/screencast-tdd-xcode" rel="alternate"></link><published>2010-04-25T00:00:00+02:00</published><updated>2010-04-25T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-04-25:/post/547615337/screencast-tdd-xcode</id><summary type="html">&lt;iframe width="500" height="281" src="http://www.youtube.com/embed/TdnbaNV3CJ8?wmode=transparent&amp;autohide=1&amp;egm=0&amp;hd=1&amp;iv_load_policy=3&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;showsearch=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Questo screencast è una breve introduzione su come si possa lavorare in TDD con Xcode.&lt;/p&gt;
&lt;p&gt;L’applicazione di cui si parla è un matcher, analogo a quello di cui ho parlato nel &lt;a href="/post/540519014/asserzioni-in-objective-c"&gt;precedente&lt;/a&gt; post, che ha una classe &lt;code&gt;Verify&lt;/code&gt;, con una serie di metodi statici per confrontare oggetti.&lt;/p&gt;
&lt;p&gt;Nel video …&lt;/p&gt;</summary><content type="html">&lt;iframe width="500" height="281" src="http://www.youtube.com/embed/TdnbaNV3CJ8?wmode=transparent&amp;autohide=1&amp;egm=0&amp;hd=1&amp;iv_load_policy=3&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;showsearch=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Questo screencast è una breve introduzione su come si possa lavorare in TDD con Xcode.&lt;/p&gt;
&lt;p&gt;L’applicazione di cui si parla è un matcher, analogo a quello di cui ho parlato nel &lt;a href="/post/540519014/asserzioni-in-objective-c"&gt;precedente&lt;/a&gt; post, che ha una classe &lt;code&gt;Verify&lt;/code&gt;, con una serie di metodi statici per confrontare oggetti.&lt;/p&gt;
&lt;p&gt;Nel video viene implementato il metodo &lt;code&gt;that:isEqualTo:&lt;/code&gt;, che non fa nulla se gli oggetti passati sono uguali, e genera un’eccezione se sono diversi.&lt;/p&gt;
&lt;p&gt;La musica di sottofondo è eseguita da Daniel Estrem e la puoi trovare &lt;a href="http://magnatune.com/artists/albums/estrem-bachvol1/"&gt;qui&lt;/a&gt;.&lt;/p&gt;</content><category term="Test driven development"></category><category term="TDD"></category><category term="Robe da nerd"></category><category term="Agile"></category><category term="Objective C"></category><category term="Xcode"></category></entry><entry><title>Asserzioni in Objective C</title><link href="http://blog.riccardomarotti.com/post/540519014/asserzioni-in-objective-c" rel="alternate"></link><published>2010-04-22T13:09:00+02:00</published><updated>2010-04-22T13:09:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-04-22:/post/540519014/asserzioni-in-objective-c</id><summary type="html">&lt;p&gt;Da una &lt;a href="http://blogs.ugidotnet.org/AntonioGanci/archive/2010/04/19/un-approccio-per-ottenere-una-architettura-malleabile.aspx#feedback"&gt;discussione&lt;/a&gt; in un post di &lt;a href="http://blogs.ugidotnet.org/AntonioGanci/Default.aspx"&gt;Antonio&lt;/a&gt;, mi sono accorto che i matcher usati in Objective C non sfruttano l’espressività del linguagggio.&lt;/p&gt;
&lt;p&gt;Le assert di &lt;a href="http://www.sente.ch/software/ocunit/"&gt;OCUnit&lt;/a&gt; sono cose del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STAssertNotNil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;messsage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La libreria &lt;a href="http://code.google.com/p/hamcrest/"&gt;Hamcrest&lt;/a&gt; addolcisce un po’ la sintassi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AssertThat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isNot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hamcrest, però, non …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Da una &lt;a href="http://blogs.ugidotnet.org/AntonioGanci/archive/2010/04/19/un-approccio-per-ottenere-una-architettura-malleabile.aspx#feedback"&gt;discussione&lt;/a&gt; in un post di &lt;a href="http://blogs.ugidotnet.org/AntonioGanci/Default.aspx"&gt;Antonio&lt;/a&gt;, mi sono accorto che i matcher usati in Objective C non sfruttano l’espressività del linguagggio.&lt;/p&gt;
&lt;p&gt;Le assert di &lt;a href="http://www.sente.ch/software/ocunit/"&gt;OCUnit&lt;/a&gt; sono cose del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STAssertNotNil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;messsage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La libreria &lt;a href="http://code.google.com/p/hamcrest/"&gt;Hamcrest&lt;/a&gt; addolcisce un po’ la sintassi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AssertThat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isNot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hamcrest, però, non è altro che un porting di una libreria Java, per cui utilizza la sintassi che ti permette di usare Java.&lt;/p&gt;
&lt;p&gt;In virtù della sua parentela con Smalltalk, Objective C è molto più espressivo di così, e permette di fare cose del tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Assert&lt;/span&gt; &lt;span class="nl"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="nl"&gt;isNot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Non è meglio?&lt;/p&gt;
&lt;p&gt;Per l’implementazione, si tratta di creare il metodo &lt;code&gt;that:IsNot:&lt;/code&gt; sulla classe &lt;code&gt;Assert&lt;/code&gt;, nulla di più.&lt;/p&gt;
&lt;p&gt;Ho intenzione di usare qualcosa del genere nei miei progetti.&lt;/p&gt;
&lt;p&gt;Voi cosa ne pensate?&lt;/p&gt;</content><category term="Objective C"></category><category term="Robe da nerd"></category><category term="Unit test"></category></entry><entry><title>Ma davvero agli Italiani non interessa il tdd?</title><link href="http://blog.riccardomarotti.com/post/537851192/ma-davvero-agli-italiani-non-interessa-il-tdd" rel="alternate"></link><published>2010-04-21T12:35:00+02:00</published><updated>2010-04-21T12:35:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-04-21:/post/537851192/ma-davvero-agli-italiani-non-interessa-il-tdd</id><summary type="html">&lt;p&gt;Stavo valutando l’ipotesi di preparare una serie di post (o magari anche screencast) sul &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt; con &lt;a href="http://developer.apple.com/technologies/tools/"&gt;Xcode&lt;/a&gt;, visto che in giro non si trova molto. In particolare, dato che sto iniziando a scrivere un’applicazione per Mac, vorrei fare una sorta di diario del suo sviluppo.&lt;/p&gt;
&lt;p&gt;Prima …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Stavo valutando l’ipotesi di preparare una serie di post (o magari anche screencast) sul &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt; con &lt;a href="http://developer.apple.com/technologies/tools/"&gt;Xcode&lt;/a&gt;, visto che in giro non si trova molto. In particolare, dato che sto iniziando a scrivere un’applicazione per Mac, vorrei fare una sorta di diario del suo sviluppo.&lt;/p&gt;
&lt;p&gt;Prima di mettermi a fare il lavoro, ho voluto verificare il possibile interesse che può suscitare una cosa del genere. &lt;/p&gt;
&lt;p&gt;Pare che, in Italia, il TDD non interessi praticamente a nessuno.&lt;/p&gt;
&lt;p&gt;Xcode interessa poco di più.&lt;/p&gt;
&lt;p&gt;E chi lo dice? Google. &lt;/p&gt;
&lt;p&gt;Con le sue &lt;a href="http://www.google.com/insights/search/"&gt;statistiche di ricerca&lt;/a&gt;, ho cercato la frequenza delle parole chiave “&lt;a href="http://www.google.com/insights/search/#q=TDD&amp;amp;geo=IT&amp;amp;date=1%2F2009%2012m&amp;amp;cmpt=geo"&gt;TDD&lt;/a&gt;”, “&lt;a href="http://www.google.com/insights/search/#q=Test%20Driven%20Development&amp;amp;geo=IT&amp;amp;date=1%2F2009%2012m&amp;amp;cmpt=geo"&gt;Test Driven Development&lt;/a&gt;”, “&lt;a href="http://www.google.com/insights/search/#q=Objective%20C&amp;amp;geo=IT&amp;amp;date=1%2F2009%2012m&amp;amp;cmpt=geo"&gt;Objective C&lt;/a&gt;” e “&lt;a href="http://www.google.com/insights/search/#q=XCode&amp;amp;geo=IT&amp;amp;date=1%2F2009%2012m&amp;amp;cmpt=geo"&gt;Xcode&lt;/a&gt;” in Italia, nel 2009. Come si può vedere, l’interesse rilevato da Google per queste parole è molto basso.&lt;/p&gt;
&lt;p&gt;Da qui si deduce che, probabilmente, una serie di post del genere sarebbe tempo sprecato, perché non servirebbe a nessuno.&lt;/p&gt;
&lt;p&gt;A questo punto ti chiedo: a te interesserebbe?&lt;/p&gt;
&lt;p&gt;Se sì, lascia un commento per farmelo sapere, o mandami una mail (riccardo at marotti.name). E raccomanda a tutti quelli che conosci di fare altrettanto ;).&lt;/p&gt;</content><category term="Objective C"></category><category term="TDD"></category><category term="XCode"></category></entry><entry><title>Mi sono licenziato</title><link href="http://blog.riccardomarotti.com/post/531035690/mi-sono-licenziato-finalmente-posso-fare-la-cacca" rel="alternate"></link><published>2010-04-18T19:19:00+02:00</published><updated>2010-04-18T19:19:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-04-18:/post/531035690/mi-sono-licenziato-finalmente-posso-fare-la-cacca</id><summary type="html">&lt;p&gt;Finalmente posso fare la cacca quando mi pare.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finalmente posso fare la cacca quando mi pare.&lt;/p&gt;</content></entry><entry><title>Come rimuovere il DRM dai PDF che hai comprato</title><link href="http://blog.riccardomarotti.com/post/522788392/come-rimuovere-il-drm-dai-pdf-che-hai-comprato" rel="alternate"></link><published>2010-04-15T00:00:00+02:00</published><updated>2010-04-15T00:00:00+02:00</updated><author><name>Riccardo Marotti</name></author><id>tag:blog.riccardomarotti.com,2010-04-15:/post/522788392/come-rimuovere-il-drm-dai-pdf-che-hai-comprato</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; (Nov 2012): &lt;a href="http://lifehacker.com/5954466/how-do-i-get-rid-of-the-drm-on-my-ebooks-and-video"&gt;questo articolo&lt;/a&gt; spiega come rimuovere le protezioni utilizzando &lt;a href="http://calibre-ebook.com"&gt;calibre&lt;/a&gt;, in modo più semplice rispetto a quanto spiegato in questo post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ieri ho comprato un ebook su &lt;a href="http://www.bookdepository.co.uk/"&gt;Book Depository&lt;/a&gt;. Visto che come formato indicava PDF, supponevo di poterlo leggere col vecchio caro &lt;a href="http://en.wikipedia.org/wiki/Preview_(software)"&gt;Preview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Invece, &lt;strong&gt;solo dopo averlo pagato …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; (Nov 2012): &lt;a href="http://lifehacker.com/5954466/how-do-i-get-rid-of-the-drm-on-my-ebooks-and-video"&gt;questo articolo&lt;/a&gt; spiega come rimuovere le protezioni utilizzando &lt;a href="http://calibre-ebook.com"&gt;calibre&lt;/a&gt;, in modo più semplice rispetto a quanto spiegato in questo post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ieri ho comprato un ebook su &lt;a href="http://www.bookdepository.co.uk/"&gt;Book Depository&lt;/a&gt;. Visto che come formato indicava PDF, supponevo di poterlo leggere col vecchio caro &lt;a href="http://en.wikipedia.org/wiki/Preview_(software)"&gt;Preview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Invece, &lt;strong&gt;solo dopo averlo pagato&lt;/strong&gt;, al momento del download, vengo informato di due cose sconcertanti:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in quanto DRM munito, per leggere quel pdf serve Adobe Digital Editions (software notoriamente raccapricciante)&lt;/li&gt;
&lt;li&gt;posso scaricarlo al massimo 3 volte&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A questo punto, dopo una &lt;a href="http://www.gametrailers.com/user-movie/homer-simpson-angry/89292"&gt;breve incazzatura galattica&lt;/a&gt; (il libro l’ho pagato 30 euro), decido che l’unica soluzione razionale è rimuovere il DRM dal pdf.&lt;/p&gt;
&lt;p&gt;La cosa, in realtà, è di una semplicità eclatante, a dimostrazione di quanto sia utile e fondamentale il DRM&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Ho trovato &lt;a href="http://imaddicted.ca/ebooks/using-inept-to-strip-drm/"&gt;questo&lt;/a&gt; articolo, che spiega come fare, solo che non funzionava: “error decrypting book session key”. Allora ho indagato ancora po’ e ho scoperto che bastava una versione più aggiornata degli script che suggeriva di usare.&lt;/p&gt;
&lt;p&gt;In sostanza, per poter decrittare i pdf, servono:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strike&gt;Windows :( (purtroppo gli script richiedono windll…) &lt;/strike&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.python.it/download/"&gt;Python&lt;/a&gt; installato&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.voidspace.org.uk/python/modules.shtml#pycrypto"&gt;Pycrypto&lt;/a&gt; installato&lt;/li&gt;
&lt;li&gt;Questi due script: &lt;a href="http://pastebin.com/sQSNwN8B"&gt;ineptpdf.pyw&lt;/a&gt;, &lt;a href="http://pastebin.com/HbHbebqY"&gt;ineptkey.pyw&lt;/a&gt; (&lt;a href="http://pastebin.com/f1182324a"&gt;ineptkeymac.py&lt;/a&gt; su Mac) &lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Un’installazione di Adobe Digital Editions con registrato l’utente con cui si è scaricato il pdf&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A questo punto, dopo aver messo gli script e il pdf in una qualunque directory (per esempio c:\pdf), si esegue, da una command line in quella directory, ineptkey.pyw per ottenere la chiave dell’utente.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image1" src="/images/drm-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Poi si esegue &lt;code&gt;ineptpdf.pyw&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2" src="/images/drm-2.png"&gt;&lt;/p&gt;
&lt;p&gt;inserendo il file contenente la chiave, il pdf protetto e il nome del file di output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image3" src="/images/drm-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Premere Decrypt.&lt;/p&gt;
&lt;p&gt;Fatto.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;Su &lt;a href="http://pragprog.com/"&gt;questo&lt;/a&gt; sito vendono libri tecnici senza DRM. Sono certo che loro non hanno problemi economici dovuti a questa assenza.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Grazie a Lance che ha suggerito l’utilizzo di questo script su Mac, sotto nei commenti.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content></entry></feed>